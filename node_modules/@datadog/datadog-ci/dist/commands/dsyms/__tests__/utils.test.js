"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importStar(require("fs"));
const glob_1 = __importDefault(require("glob"));
const utils_1 = require("../../../helpers/utils");
const utils_2 = require("../utils");
describe('utils', () => {
    describe('createTmpDirectory', () => {
        test('Create unique directory', () => __awaiter(void 0, void 0, void 0, function* () {
            const tmpDirectory1 = yield utils_2.createUniqueTmpDirectory();
            const tmpDirectory2 = yield utils_2.createUniqueTmpDirectory();
            expect(fs_1.default.existsSync(tmpDirectory1)).toBeTruthy();
            expect(fs_1.default.existsSync(tmpDirectory2)).toBeTruthy();
            expect(tmpDirectory1).not.toEqual(tmpDirectory2);
            yield utils_2.deleteDirectory(tmpDirectory1);
            yield utils_2.deleteDirectory(tmpDirectory2);
        }));
    });
    describe('deleteDirectory', () => {
        test('Delete empty directory', () => __awaiter(void 0, void 0, void 0, function* () {
            const tmpDirectory = yield utils_2.createUniqueTmpDirectory();
            yield utils_2.deleteDirectory(tmpDirectory);
            expect(fs_1.default.existsSync(tmpDirectory)).toBeFalsy();
        }));
        test('Delete non-empty directory', () => __awaiter(void 0, void 0, void 0, function* () {
            const tmpDirectory = yield utils_2.createUniqueTmpDirectory();
            yield fs_1.promises.mkdir(utils_1.buildPath(tmpDirectory, 'foo'));
            yield fs_1.promises.writeFile(utils_1.buildPath(tmpDirectory, 'foo', 'bar1'), 'mock1');
            yield fs_1.promises.writeFile(utils_1.buildPath(tmpDirectory, 'foo', 'bar2'), 'mock2');
            yield utils_2.deleteDirectory(tmpDirectory);
            expect(fs_1.default.existsSync(tmpDirectory)).toBeFalsy();
        }));
    });
    describe('zipDirectoryToArchive', () => {
        test('Compress folder to archive at given path', () => __awaiter(void 0, void 0, void 0, function* () {
            const archiveDirectory = yield utils_2.createUniqueTmpDirectory();
            const archivePath = utils_1.buildPath(archiveDirectory, 'archive.zip');
            yield utils_2.zipDirectoryToArchive('./src/commands/dsyms/__tests__/fixtures', archivePath);
            expect(fs_1.default.existsSync(archivePath)).toBeTruthy();
            yield utils_2.deleteDirectory(archiveDirectory);
        }));
    });
    describe('unzipArchiveToDirectory', () => {
        test('Uncompress archive to given destination', () => __awaiter(void 0, void 0, void 0, function* () {
            const archiveDirectory = yield utils_2.createUniqueTmpDirectory();
            const destinationDirectory = yield utils_2.createUniqueTmpDirectory();
            const archivePath = utils_1.buildPath(archiveDirectory, 'archive.zip');
            yield utils_2.zipDirectoryToArchive('./src/commands/dsyms/__tests__/fixtures', archivePath);
            yield utils_2.unzipArchiveToDirectory(archivePath, destinationDirectory);
            const originalContentList = glob_1.default.sync(utils_1.buildPath('./src/commands/dsyms/__tests__/', 'fixtures/**/*'));
            const unzippedContentList = glob_1.default.sync(utils_1.buildPath(destinationDirectory, 'fixtures/**/*'));
            expect(originalContentList.length).toEqual(unzippedContentList.length);
            yield utils_2.deleteDirectory(archiveDirectory);
            yield utils_2.deleteDirectory(destinationDirectory);
        }));
    });
    describe('isZipFile', () => {
        test('Zip file should return true', () => __awaiter(void 0, void 0, void 0, function* () {
            const file = './src/commands/dsyms/__tests__/fixtures/all.zip';
            expect(yield utils_2.isZipFile(file)).toBeTruthy();
        }));
        test('Arbitrary file should return false', () => __awaiter(void 0, void 0, void 0, function* () {
            const file = './src/commands/dsyms/__tests__/fixtures/multiple-archs/DDTest.framework.dSYM';
            expect(yield utils_2.isZipFile(file)).toBeFalsy();
        }));
    });
});
//# sourceMappingURL=utils.test.js.map