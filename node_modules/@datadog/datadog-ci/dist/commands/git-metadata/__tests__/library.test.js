"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const apikey = __importStar(require("../../../helpers/apikey"));
const upload = __importStar(require("../../../helpers/upload"));
const git = __importStar(require("../git"));
const interfaces_1 = require("../interfaces");
const library_1 = require("../library");
describe('library', () => {
    describe('isGitRepo', () => {
        test('should return false if checkIsRepo fails', () => __awaiter(void 0, void 0, void 0, function* () {
            const simpleGitClient = {
                checkIsRepo: () => {
                    throw Error();
                },
            };
            jest.spyOn(git, 'newSimpleGit').mockResolvedValue(simpleGitClient);
            yield expect(library_1.isGitRepo()).resolves.toEqual(false);
        }));
        test('should return false git is not installed', () => __awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(git, 'newSimpleGit').mockImplementation(() => {
                throw new Error('git is not installed');
            });
            yield expect(library_1.isGitRepo()).resolves.toEqual(false);
        }));
        test('should return true if datadog API key is set, git is installed, and we are in a repo', () => __awaiter(void 0, void 0, void 0, function* () {
            const simpleGitClient = { checkIsRepo: () => true };
            jest.spyOn(git, 'newSimpleGit').mockResolvedValue(simpleGitClient);
            yield expect(library_1.isGitRepo()).resolves.toEqual(true);
        }));
    });
    describe('addSourceCodeIntegration', () => {
        test('source code integration fails if simpleGitOrFail throws an exception', () => __awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(git, 'newSimpleGit').mockImplementation(() => {
                throw new Error('git is not installed');
            });
            jest.spyOn(apikey, 'newApiKeyValidator').mockReturnValue({});
            yield expect(library_1.uploadGitCommitHash('dummy', 'fake.site')).rejects.toThrowError('git is not installed');
        }));
        test('source code integration returns the correct hash', () => __awaiter(void 0, void 0, void 0, function* () {
            const simpleGitClient = { checkIsRepo: () => true };
            jest.spyOn(git, 'newSimpleGit').mockResolvedValue(simpleGitClient);
            jest.spyOn(git, 'getCommitInfo').mockImplementation(() => __awaiter(void 0, void 0, void 0, function* () { return new interfaces_1.CommitInfo('hash', 'url', ['file1', 'file2']); }));
            jest.spyOn(upload, 'upload').mockReturnValue((a, b) => {
                {
                    return new Promise((resolve) => {
                        resolve(upload.UploadStatus.Success);
                    });
                }
            });
            jest.spyOn(apikey, 'newApiKeyValidator').mockReturnValue({});
            expect(yield library_1.uploadGitCommitHash('dummy', 'fake.site')).toBe('hash');
        }));
    });
});
//# sourceMappingURL=library.test.js.map