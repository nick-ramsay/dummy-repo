"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-string-literal
const os_1 = __importDefault(require("os"));
const chalk_1 = __importDefault(require("chalk"));
const advanced_1 = require("clipanion/lib/advanced");
const upload_1 = require("../upload");
describe('upload', () => {
    describe('getApiHelper', () => {
        test('should throw an error if API key is undefined', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env = {};
            const command = new upload_1.UploadCommand();
            expect(command['getRequestBuilder'].bind(command)).toThrow(`Missing ${chalk_1.default.bold('DATADOG_API_KEY')} in your environment.`);
        }));
    });
});
describe('execute', () => {
    const runCLI = () => __awaiter(void 0, void 0, void 0, function* () {
        const cli = makeCli();
        const context = createMockContext();
        process.env = { DATADOG_API_KEY: 'PLACEHOLDER' };
        const code = yield cli.run(['git-metadata', 'upload', '--dry-run'], context);
        return { context, code };
    });
    test('runCLI', () => __awaiter(void 0, void 0, void 0, function* () {
        const { code, context } = yield runCLI();
        const output = context.stdout.toString().split(os_1.default.EOL);
        output.reverse();
        expect(output[1]).toContain('[DRYRUN] Handled');
        expect(code).toBe(0);
    }));
});
const makeCli = () => {
    const cli = new advanced_1.Cli();
    cli.register(upload_1.UploadCommand);
    return cli;
};
const createMockContext = () => {
    let data = '';
    return {
        stdout: {
            toString: () => data,
            write: (input) => {
                data += input;
            },
        },
    };
};
//# sourceMappingURL=upload.test.js.map