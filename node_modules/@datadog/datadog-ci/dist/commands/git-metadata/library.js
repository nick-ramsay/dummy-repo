"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadRepository = exports.uploadGitCommitHash = exports.isGitRepo = void 0;
const apikey_1 = require("../../helpers/apikey");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const git_1 = require("./git");
const isGitRepo = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const simpleGit = yield git_1.newSimpleGit();
        const isRepo = simpleGit.checkIsRepo();
        return isRepo;
    }
    catch (_a) {
        return false;
    }
});
exports.isGitRepo = isGitRepo;
const uploadGitCommitHash = (apiKey, datadogSite) => __awaiter(void 0, void 0, void 0, function* () {
    const apiKeyValidator = apikey_1.newApiKeyValidator({
        apiKey,
        datadogSite,
    });
    const simpleGit = yield git_1.newSimpleGit();
    const payload = yield git_1.getCommitInfo(simpleGit);
    const version = require('../../../package.json').version;
    const requestBuilder = utils_1.getRequestBuilder({
        apiKey,
        baseUrl: 'https://sourcemap-intake.' + datadogSite,
        headers: new Map([
            ['DD-EVP-ORIGIN', 'datadog-ci sci'],
            ['DD-EVP-ORIGIN-VERSION', version],
        ]),
        overrideUrl: 'api/v2/srcmap',
    });
    const status = yield exports.uploadRepository(requestBuilder, version)(payload, {
        apiKeyValidator,
        onError: (e) => {
            throw e;
        },
        onRetry: () => {
            // Do nothing
        },
        onUpload: () => {
            return;
        },
        retries: 5,
    });
    if (status !== upload_1.UploadStatus.Success) {
        throw new Error('Error uploading commit information.');
    }
    return payload.hash;
});
exports.uploadGitCommitHash = uploadGitCommitHash;
const uploadRepository = (requestBuilder, libraryVersion) => (commitInfo, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = commitInfo.asMultipartPayload(libraryVersion);
    return upload_1.upload(requestBuilder)(payload, opts);
});
exports.uploadRepository = uploadRepository;
//# sourceMappingURL=library.js.map