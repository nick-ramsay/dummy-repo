"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderCommandInfo = exports.renderDryRunWarning = exports.renderSuccessfulCommand = exports.renderRetriedUpload = exports.renderFailedUpload = exports.renderConfigurationError = exports.renderGitError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const formatting_1 = require("../../helpers/formatting");
const renderGitError = (errorMessage) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} An error occured while invoking git: ${errorMessage}
Make sure the command is running within your git repository.\n`);
exports.renderGitError = renderGitError;
const renderConfigurationError = (error) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Configuration error: ${error}.\n`);
exports.renderConfigurationError = renderConfigurationError;
const renderFailedUpload = (errorMessage) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Failed upload: ${errorMessage}\n`);
exports.renderFailedUpload = renderFailedUpload;
const renderRetriedUpload = (errorMessage, attempt) => chalk_1.default.yellow(`[attempt ${attempt}] Retrying upload: ${errorMessage}\n`);
exports.renderRetriedUpload = renderRetriedUpload;
const renderSuccessfulCommand = (duration, dryRun) => {
    if (dryRun) {
        return chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} [DRYRUN] Handled in ${duration} seconds.\n`);
    }
    else {
        return chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} Uploaded in ${duration} seconds.\n`);
    }
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderDryRunWarning = () => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD\n`);
exports.renderDryRunWarning = renderDryRunWarning;
const renderCommandInfo = (commit) => `Reporting commit ${commit.hash} from repository ${commit.remote}.
${commit.trackedFiles.length} tracked file paths will be reported.\n`;
exports.renderCommandInfo = renderCommandInfo;
//# sourceMappingURL=renderer.js.map