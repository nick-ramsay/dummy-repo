"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const apikey_1 = require("../../helpers/apikey");
const errors_1 = require("../../helpers/errors");
const formatting_1 = require("../../helpers/formatting");
const metrics_1 = require("../../helpers/metrics");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const api_1 = require("./api");
const git_1 = require("./git");
const library_1 = require("./library");
const renderer_1 = require("./renderer");
class UploadCommand extends clipanion_1.Command {
    constructor() {
        super();
        this.config = {
            apiKey: process.env.DATADOG_API_KEY,
        };
        this.dryRun = false;
        this.cliVersion = require('../../../package.json').version;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialTime = new Date().getTime();
            if (this.dryRun) {
                this.context.stdout.write(renderer_1.renderDryRunWarning());
            }
            const metricsLogger = metrics_1.getMetricsLogger({
                datadogSite: process.env.DATADOG_SITE,
                defaultTags: [`cli_version:${this.cliVersion}`],
                prefix: 'datadog.ci.report_commits.',
            });
            const apiKeyValidator = apikey_1.newApiKeyValidator({
                apiKey: this.config.apiKey,
                datadogSite: api_1.datadogSite,
                metricsLogger: metricsLogger.logger,
            });
            let payload;
            try {
                payload = yield git_1.getCommitInfo(yield git_1.newSimpleGit(), this.repositoryURL);
            }
            catch (e) {
                if (e instanceof Error) {
                    this.context.stdout.write(renderer_1.renderFailedUpload(e.message));
                }
                return;
            }
            this.context.stdout.write(renderer_1.renderCommandInfo(payload));
            let status;
            try {
                const requestBuilder = this.getRequestBuilder();
                if (this.dryRun) {
                    status = upload_1.UploadStatus.Success;
                }
                else {
                    status = yield library_1.uploadRepository(requestBuilder, this.cliVersion)(payload, {
                        apiKeyValidator,
                        onError: (e) => {
                            this.context.stdout.write(renderer_1.renderFailedUpload(e.message));
                            metricsLogger.logger.increment('failed', 1);
                        },
                        onRetry: (e, attempt) => {
                            this.context.stdout.write(renderer_1.renderRetriedUpload(e.message, attempt));
                            metricsLogger.logger.increment('retries', 1);
                        },
                        onUpload: () => {
                            return;
                        },
                        retries: 5,
                    });
                }
                metricsLogger.logger.increment('success', 1);
                const totalTime = (Date.now() - initialTime) / 1000;
                if (status !== upload_1.UploadStatus.Success) {
                    this.context.stdout.write(chalk_1.default.red(`${formatting_1.ICONS.FAILED} Error uploading commit information.`));
                    return 1;
                }
                this.context.stdout.write(renderer_1.renderSuccessfulCommand(totalTime, this.dryRun));
                metricsLogger.logger.gauge('duration', totalTime);
                return 0;
            }
            catch (error) {
                if (error instanceof errors_1.InvalidConfigurationError) {
                    this.context.stdout.write(renderer_1.renderConfigurationError(error));
                    return 1;
                }
                // Otherwise unknown error, let's propagate the exception
                throw error;
            }
            finally {
                try {
                    yield metricsLogger.flush();
                }
                catch (err) {
                    this.context.stdout.write(`WARN: ${err}\n`);
                }
            }
        });
    }
    getRequestBuilder() {
        if (!this.config.apiKey) {
            throw new errors_1.InvalidConfigurationError(`Missing ${chalk_1.default.bold('DATADOG_API_KEY')} in your environment.`);
        }
        return utils_1.getRequestBuilder({
            apiKey: this.config.apiKey,
            baseUrl: api_1.getBaseIntakeUrl(),
            headers: new Map([
                ['DD-EVP-ORIGIN', 'datadog-ci git-metadata'],
                ['DD-EVP-ORIGIN-VERSION', this.cliVersion],
            ]),
            overrideUrl: 'api/v2/srcmap',
        });
    }
}
exports.UploadCommand = UploadCommand;
UploadCommand.usage = clipanion_1.Command.Usage({
    description: 'Report the current commit details to Datadog.',
    details: `
            This command will upload the commit details to Datadog in order to create links to your repositories inside DataDog's UI.
            See README for details.
        `,
    examples: [['Upload the current commit details', 'datadog-ci report-commits upload']],
});
UploadCommand.addPath('git-metadata', 'upload');
UploadCommand.addOption('dryRun', clipanion_1.Command.Boolean('--dry-run'));
UploadCommand.addOption('repositoryURL', clipanion_1.Command.String('--repository-url'));
//# sourceMappingURL=upload.js.map