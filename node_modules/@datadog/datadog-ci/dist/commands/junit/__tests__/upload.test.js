"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-string-literal
const advanced_1 = require("clipanion/lib/advanced");
const os_1 = __importDefault(require("os"));
const renderer_1 = require("../renderer");
const upload_1 = require("../upload");
const makeCli = () => {
    const cli = new advanced_1.Cli();
    cli.register(upload_1.UploadJUnitXMLCommand);
    return cli;
};
const createMockContext = () => {
    let data = '';
    return {
        stdout: {
            toString: () => data,
            write: (input) => {
                data += input;
            },
        },
    };
};
describe('upload', () => {
    describe('getApiHelper', () => {
        test('should throw an error if API key is undefined', () => {
            process.env = {};
            const write = jest.fn();
            const command = new upload_1.UploadJUnitXMLCommand();
            command.context = { stdout: { write } };
            expect(command['getApiHelper'].bind(command)).toThrow('API key is missing');
            expect(write.mock.calls[0][0]).toContain('DATADOG_API_KEY');
        });
    });
    describe('getMatchingJUnitXMLFiles', () => {
        test('should read all xml files and reject invalid ones', () => __awaiter(void 0, void 0, void 0, function* () {
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const [firstFile, secondFile] = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures'],
                config: {},
                context,
                service: 'service',
            });
            expect(firstFile).toMatchObject({
                service: 'service',
                xmlPath: './src/commands/junit/__tests__/fixtures/go-report.xml',
            });
            expect(secondFile).toMatchObject({
                service: 'service',
                xmlPath: './src/commands/junit/__tests__/fixtures/java-report.xml',
            });
            const output = context.stdout.toString();
            expect(output).toContain(renderer_1.renderInvalidFile('./src/commands/junit/__tests__/fixtures/empty.xml', 'Start tag expected.'));
            expect(output).toContain(renderer_1.renderInvalidFile('./src/commands/junit/__tests__/fixtures/invalid.xml', 'Neither <testsuites> nor <testsuite> are the root tag.'));
        }));
        test('should allow single files', () => __awaiter(void 0, void 0, void 0, function* () {
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const files = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures/go-report.xml'],
                config: {},
                context,
                service: 'service',
            });
            expect(files.length).toEqual(1);
            expect(files[0]).toMatchObject({
                service: 'service',
                xmlPath: './src/commands/junit/__tests__/fixtures/go-report.xml',
            });
        }));
        test('should not fail for invalid single files', () => __awaiter(void 0, void 0, void 0, function* () {
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const files = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures/does-not-exist.xml'],
                config: {},
                context,
                service: 'service',
            });
            expect(files.length).toEqual(0);
        }));
        test('should allow folder and single unit paths', () => __awaiter(void 0, void 0, void 0, function* () {
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const [firstFile, secondFile, thirdFile] = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: [
                    './src/commands/junit/__tests__/fixtures',
                    './src/commands/junit/__tests__/fixtures/subfolder/js-report.xml',
                ],
                config: {},
                context,
                service: 'service',
            });
            expect(firstFile).toMatchObject({
                service: 'service',
                xmlPath: './src/commands/junit/__tests__/fixtures/go-report.xml',
            });
            expect(secondFile).toMatchObject({
                service: 'service',
                xmlPath: './src/commands/junit/__tests__/fixtures/java-report.xml',
            });
            expect(thirdFile).toMatchObject({
                service: 'service',
                xmlPath: './src/commands/junit/__tests__/fixtures/subfolder/js-report.xml',
            });
        }));
        test('should not have repeated files', () => __awaiter(void 0, void 0, void 0, function* () {
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const files = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures', './src/commands/junit/__tests__/fixtures/go-report.xml'],
                config: {},
                context,
                service: 'service',
            });
            expect(files.length).toEqual(2);
        }));
        test('should parse DD_TAGS and DD_ENV environment variables', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env.DD_TAGS = 'key1:https://google.com,key2:value2';
            process.env.DD_ENV = 'ci';
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const [firstFile, secondFile] = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures'],
                config: {
                    env: process.env.DD_ENV,
                    envVarTags: process.env.DD_TAGS,
                },
                context,
                service: 'service',
            });
            expect(firstFile.spanTags).toMatchObject({
                env: 'ci',
                key1: 'https://google.com',
                key2: 'value2',
            });
            expect(secondFile.spanTags).toMatchObject({
                env: 'ci',
                key1: 'https://google.com',
                key2: 'value2',
            });
        }));
        test('should parse tags argument', () => __awaiter(void 0, void 0, void 0, function* () {
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const [firstFile, secondFile] = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures'],
                config: {},
                context,
                service: 'service',
                tags: ['key1:value1', 'key2:value2'],
            });
            expect(firstFile.spanTags).toMatchObject({
                key1: 'value1',
                key2: 'value2',
            });
            expect(secondFile.spanTags).toMatchObject({
                key1: 'value1',
                key2: 'value2',
            });
        }));
        test('should set logsEnabled for each file', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env.DD_CIVISIBILITY_LOGS_ENABLED = 'true';
            const context = createMockContext();
            const command = new upload_1.UploadJUnitXMLCommand();
            const [firstFile, secondFile] = yield command['getMatchingJUnitXMLFiles'].call({
                basePaths: ['./src/commands/junit/__tests__/fixtures'],
                config: {},
                context,
                logs: true,
                service: 'service',
            });
            expect(firstFile.logsEnabled).toBe(true);
            expect(secondFile.logsEnabled).toBe(true);
        }));
    });
});
describe('execute', () => {
    const runCLI = (paths) => __awaiter(void 0, void 0, void 0, function* () {
        const cli = makeCli();
        const context = createMockContext();
        process.env = { DATADOG_API_KEY: 'PLACEHOLDER' };
        const code = yield cli.run(['junit', 'upload', '--service', 'test-service', '--dry-run', '--logs', ...paths], context);
        return { context, code };
    });
    test('relative path with double dots', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield runCLI(['./src/commands/junit/__tests__/doesnotexist/../fixtures']);
        const output = context.stdout.toString().split(os_1.default.EOL);
        expect(code).toBe(0);
        checkConsoleOutput(output, {
            basePaths: ['src/commands/junit/__tests__/fixtures'],
            concurrency: 20,
            service: 'test-service',
        });
    }));
    test('multiple paths', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield runCLI(['./src/commands/junit/first/', './src/commands/junit/second/']);
        const output = context.stdout.toString().split(os_1.default.EOL);
        expect(code).toBe(0);
        checkConsoleOutput(output, {
            basePaths: ['src/commands/junit/first/', 'src/commands/junit/second/'],
            concurrency: 20,
            service: 'test-service',
        });
    }));
    test('absolute path', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield runCLI([process.cwd() + '/src/commands/junit/__tests__/fixtures']);
        const output = context.stdout.toString().split(os_1.default.EOL);
        expect(code).toBe(0);
        checkConsoleOutput(output, {
            basePaths: [`${process.cwd()}/src/commands/junit/__tests__/fixtures`],
            concurrency: 20,
            service: 'test-service',
        });
    }));
    test('single file', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield runCLI([process.cwd() + '/src/commands/junit/__tests__/fixtures/single_file.xml']);
        const output = context.stdout.toString().split(os_1.default.EOL);
        const path = `${process.cwd()}/src/commands/junit/__tests__/fixtures/single_file.xml`;
        expect(code).toBe(0);
        expect(output[0]).toContain('DRY-RUN MODE ENABLED. WILL NOT UPLOAD JUNIT XML');
        expect(output[1]).toContain('Starting upload with concurrency 20.');
        expect(output[2]).toContain(`Will upload jUnit XML file ${path}`);
        expect(output[3]).toContain('service: test-service');
    }));
});
const checkConsoleOutput = (output, expected) => {
    expect(output[0]).toContain('DRY-RUN MODE ENABLED. WILL NOT UPLOAD JUNIT XML');
    expect(output[1]).toContain(`Starting upload with concurrency ${expected.concurrency}.`);
    expect(output[2]).toContain(`Will look for jUnit XML files in ${expected.basePaths.join(', ')}`);
    expect(output[3]).toContain(`service: ${expected.service}`);
};
//# sourceMappingURL=upload.test.js.map