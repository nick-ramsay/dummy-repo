"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.uploadJUnitXML = exports.getSafeFileName = void 0;
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const zlib_1 = require("zlib");
const utils_1 = require("../../helpers/utils");
const renderer_1 = require("./renderer");
const tags_1 = require("../../helpers/tags");
// We need a unique file name so we use span tags like the pipeline URL,
// which can contain dots and other unsafe characters for filenames.
// We filter them out here.
const getSafeFileName = (unsafeFileName) => unsafeFileName.replace(/[^a-z0-9]/gi, '_');
exports.getSafeFileName = getSafeFileName;
// Dependency follows-redirects sets a default maxBodyLength of 10 MB https://github.com/follow-redirects/follow-redirects/blob/b774a77e582b97174813b3eaeb86931becba69db/index.js#L391
// We don't want any hard limit enforced by the CLI, the backend will enforce a max size by returning 413 errors.
const maxBodyLength = Infinity;
const uploadJUnitXML = (request) => (jUnitXML, write) => __awaiter(void 0, void 0, void 0, function* () {
    const form = new form_data_1.default();
    write(renderer_1.renderUpload(jUnitXML));
    let fileName;
    try {
        fileName = path_1.default.parse(jUnitXML.xmlPath).name;
    }
    catch (e) {
        fileName = 'default_file_name';
    }
    const spanTags = Object.assign(Object.assign({ service: jUnitXML.service }, jUnitXML.spanTags), { '_dd.cireport_version': '2' });
    if (jUnitXML.logsEnabled) {
        spanTags['_dd.junitxml_logs'] = 'true';
    }
    form.append('event', JSON.stringify(spanTags), { filename: 'event.json' });
    let uniqueFileName = `${fileName}-${jUnitXML.service}-${spanTags[tags_1.GIT_SHA]}`;
    if (spanTags[tags_1.CI_PIPELINE_URL]) {
        uniqueFileName = `${uniqueFileName}-${spanTags[tags_1.CI_PIPELINE_URL]}`;
    }
    if (spanTags[tags_1.CI_JOB_URL]) {
        uniqueFileName = `${uniqueFileName}-${spanTags[tags_1.CI_JOB_URL]}`;
    }
    form.append('junit_xml_report_file', fs_1.default.createReadStream(jUnitXML.xmlPath).pipe(zlib_1.createGzip()), {
        filename: `${exports.getSafeFileName(uniqueFileName)}.xml.gz`,
    });
    return request({
        data: form,
        headers: form.getHeaders(),
        maxBodyLength,
        method: 'POST',
        url: 'api/v2/cireport',
    });
});
exports.uploadJUnitXML = uploadJUnitXML;
const apiConstructor = (baseIntakeUrl, apiKey) => {
    const requestIntake = utils_1.getRequestBuilder({ baseUrl: baseIntakeUrl, apiKey });
    return {
        uploadJUnitXML: exports.uploadJUnitXML(requestIntake),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map