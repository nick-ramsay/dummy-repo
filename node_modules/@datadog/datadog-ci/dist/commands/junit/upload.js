"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadJUnitXMLCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const fast_xml_parser_1 = __importDefault(require("fast-xml-parser"));
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const tiny_async_pool_1 = __importDefault(require("tiny-async-pool"));
const api_1 = require("./api");
const renderer_1 = require("./renderer");
const utils_1 = require("./utils");
const ci_1 = require("../../helpers/ci");
const git_1 = require("../../helpers/git");
const retry_1 = require("../../helpers/retry");
const tags_1 = require("../../helpers/tags");
const user_provided_git_1 = require("../../helpers/user-provided-git");
const utils_2 = require("../../helpers/utils");
const errorCodesStopUpload = [400, 403];
const validateXml = (xmlFilePath) => {
    const xmlFileContentString = String(fs_1.default.readFileSync(xmlFilePath));
    const validationOutput = fast_xml_parser_1.default.validate(xmlFileContentString);
    if (validationOutput !== true) {
        return validationOutput.err.msg;
    }
    const xmlFileJSON = fast_xml_parser_1.default.parse(String(xmlFileContentString));
    if (!xmlFileJSON.testsuites && !xmlFileJSON.testsuite) {
        return 'Neither <testsuites> nor <testsuite> are the root tag.';
    }
    return undefined;
};
class UploadJUnitXMLCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.config = {
            apiKey: process.env.DATADOG_API_KEY || process.env.DD_API_KEY,
            env: process.env.DD_ENV,
            envVarTags: process.env.DD_TAGS,
        };
        this.dryRun = false;
        this.logs = false;
        this.maxConcurrency = 20;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.service) {
                this.service = process.env.DD_SERVICE;
            }
            if (!this.service) {
                this.context.stderr.write('Missing service\n');
                return 1;
            }
            if (!this.basePaths || !this.basePaths.length) {
                this.context.stderr.write('Missing basePath\n');
                return 1;
            }
            if (!this.config.env) {
                this.config.env = this.env;
            }
            if (!this.logs &&
                process.env.DD_CIVISIBILITY_LOGS_ENABLED &&
                !['false', '0'].includes(process.env.DD_CIVISIBILITY_LOGS_ENABLED.toLowerCase())) {
                this.logs = true;
            }
            const api = this.getApiHelper();
            // Normalizing the basePath to resolve .. and .
            // Always using the posix version to avoid \ on Windows.
            this.basePaths = this.basePaths.map((basePath) => path_1.default.posix.normalize(basePath));
            this.context.stdout.write(renderer_1.renderCommandInfo(this.basePaths, this.service, this.maxConcurrency, this.dryRun));
            const payloads = yield this.getMatchingJUnitXMLFiles();
            const upload = (p) => this.uploadJUnitXML(api, p);
            const initialTime = new Date().getTime();
            yield tiny_async_pool_1.default(this.maxConcurrency, payloads, upload);
            const totalTimeSeconds = (Date.now() - initialTime) / 1000;
            this.context.stdout.write(renderer_1.renderSuccessfulCommand(payloads.length, totalTimeSeconds));
        });
    }
    getApiHelper() {
        if (!this.config.apiKey) {
            this.context.stdout.write(`Neither ${chalk_1.default.red.bold('DATADOG_API_KEY')} nor ${chalk_1.default.red.bold('DD_API_KEY')} is in your environment.\n`);
            throw new Error('API key is missing');
        }
        return api_1.apiConstructor(utils_1.getBaseIntakeUrl(), this.config.apiKey);
    }
    getMatchingJUnitXMLFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            const jUnitXMLFiles = (this.basePaths || []).reduce((acc, basePath) => {
                const isFile = !!path_1.default.extname(basePath);
                if (isFile) {
                    return acc.concat(fs_1.default.existsSync(basePath) ? [basePath] : []);
                }
                return acc.concat(glob_1.default.sync(utils_2.buildPath(basePath, '*.xml')));
            }, []);
            const ciSpanTags = ci_1.getCISpanTags();
            const gitSpanTags = yield git_1.getGitMetadata();
            const userGitSpanTags = user_provided_git_1.getUserGitSpanTags();
            const envVarTags = this.config.envVarTags ? tags_1.parseTags(this.config.envVarTags.split(',')) : {};
            const cliTags = this.tags ? tags_1.parseTags(this.tags) : {};
            const spanTags = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, gitSpanTags), ciSpanTags), userGitSpanTags), cliTags), envVarTags), (this.config.env ? { env: this.config.env } : {}));
            const validUniqueFiles = [...new Set(jUnitXMLFiles)].filter((jUnitXMLFilePath) => {
                const validationErrorMessage = validateXml(jUnitXMLFilePath);
                if (validationErrorMessage) {
                    this.context.stdout.write(renderer_1.renderInvalidFile(jUnitXMLFilePath, validationErrorMessage));
                    return false;
                }
                return true;
            });
            return validUniqueFiles.map((jUnitXMLFilePath) => ({
                logsEnabled: this.logs,
                service: this.service,
                spanTags,
                xmlPath: jUnitXMLFilePath,
            }));
        });
    }
    uploadJUnitXML(api, jUnitXML) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dryRun) {
                this.context.stdout.write(renderer_1.renderDryRunUpload(jUnitXML));
                return;
            }
            try {
                yield retry_1.retryRequest(() => api.uploadJUnitXML(jUnitXML, this.context.stdout.write.bind(this.context.stdout)), {
                    onRetry: (e, attempt) => {
                        this.context.stderr.write(renderer_1.renderRetriedUpload(jUnitXML, e.message, attempt));
                    },
                    retries: 5,
                });
            }
            catch (error) {
                this.context.stderr.write(renderer_1.renderFailedUpload(jUnitXML, error));
                if (error.response) {
                    // If it's an axios error
                    if (!errorCodesStopUpload.includes(error.response.status)) {
                        // And a status code that should not stop the whole upload, just return
                        return;
                    }
                }
                throw error;
            }
        });
    }
}
exports.UploadJUnitXMLCommand = UploadJUnitXMLCommand;
UploadJUnitXMLCommand.usage = clipanion_1.Command.Usage({
    description: 'Upload jUnit XML test reports files to Datadog.',
    details: `
            This command will upload to jUnit XML test reports files to Datadog.
            See README for details.
        `,
    examples: [
        ['Upload all jUnit XML test report files in current directory', 'datadog-ci junit upload --service my-service .'],
        [
            'Upload all jUnit XML test report files in src/unit-test-reports and src/acceptance-test-reports',
            'datadog-ci junit upload --service my-service src/unit-test-reports src/acceptance-test-reports',
        ],
        [
            'Upload all jUnit XML test report files in current directory and add extra tags',
            'datadog-ci junit upload --service my-service --tags key1:value1 --tags key2:value2 .',
        ],
        [
            'Upload all jUnit XML test report files in current directory to the datadoghq.eu site',
            'DATADOG_SITE=datadoghq.eu datadog-ci junit upload --service my-service .',
        ],
        [
            'Upload all jUnit XML test report files in current directory while also collecting logs',
            'datadog-ci junit upload --service my-service --logs .',
        ],
    ],
});
UploadJUnitXMLCommand.addPath('junit', 'upload');
UploadJUnitXMLCommand.addOption('service', clipanion_1.Command.String('--service'));
UploadJUnitXMLCommand.addOption('env', clipanion_1.Command.String('--env'));
UploadJUnitXMLCommand.addOption('dryRun', clipanion_1.Command.Boolean('--dry-run'));
UploadJUnitXMLCommand.addOption('tags', clipanion_1.Command.Array('--tags'));
UploadJUnitXMLCommand.addOption('basePaths', clipanion_1.Command.Rest({ required: 1 }));
UploadJUnitXMLCommand.addOption('maxConcurrency', clipanion_1.Command.String('--max-concurrency'));
UploadJUnitXMLCommand.addOption('logs', clipanion_1.Command.Boolean('--logs'));
//# sourceMappingURL=upload.js.map