"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockDatadogVersion = exports.mockDatadogService = exports.mockDatadogEnv = exports.mockDatadogApiKey = exports.mockAwsSecretAccessKey = exports.mockAwsAccessKeyId = exports.mockAwsAccount = exports.makeMockCloudWatchLogs = exports.makeMockLambda = exports.createCommand = exports.makeCli = exports.createMockContext = void 0;
const advanced_1 = require("clipanion/lib/advanced");
const instrument_1 = require("../instrument");
const uninstrument_1 = require("../uninstrument");
const createMockContext = () => {
    let data = '';
    return {
        stdout: {
            toString: () => data,
            write: (input) => {
                data += input;
            },
        },
    };
};
exports.createMockContext = createMockContext;
const makeCli = () => {
    const cli = new advanced_1.Cli();
    cli.register(instrument_1.InstrumentCommand);
    cli.register(uninstrument_1.UninstrumentCommand);
    return cli;
};
exports.makeCli = makeCli;
/**
 * Allows to create an instance of any command that
 * extends the Command clss.
 *
 * @param commandClass any class that extends the Command class.
 * @param parameters parameters to use while creating the commandClass
 * @returns the instance of the given command with a mock context attatched.
 */
const createCommand = (commandClass, ...parameters) => {
    // Create a new instance of commandClass and pass in the parameters
    const command = new commandClass(...parameters);
    command.context = exports.createMockContext();
    return command;
};
exports.createCommand = createCommand;
const makeMockLambda = (functionConfigs, layers) => ({
    getFunction: jest.fn().mockImplementation(({ FunctionName }) => ({
        promise: () => Promise.resolve({ Configuration: functionConfigs[FunctionName] }),
    })),
    getLayerVersion: jest.fn().mockImplementation(({ LayerName, VersionNumber }) => ({
        promise: () => {
            const layer = LayerName + ':' + VersionNumber;
            return layers && layers[layer] && layers[layer].Version === VersionNumber
                ? Promise.resolve(layers[layer])
                : Promise.reject();
        },
    })),
    listFunctions: jest.fn().mockImplementation(() => ({
        promise: () => Promise.resolve({ Functions: Object.values(functionConfigs) }),
    })),
    listTags: jest.fn().mockImplementation(() => ({ promise: () => Promise.resolve({ Tags: {} }) })),
    tagResource: jest.fn().mockImplementation(() => ({ promise: () => Promise.resolve() })),
    updateFunctionConfiguration: jest.fn().mockImplementation(() => ({ promise: () => Promise.resolve() })),
});
exports.makeMockLambda = makeMockLambda;
const makeMockCloudWatchLogs = (logGroups) => ({
    createLogGroup: jest.fn().mockImplementation(() => ({ promise: () => Promise.resolve() })),
    deleteSubscriptionFilter: jest.fn().mockImplementation(() => ({ promise: () => Promise.resolve() })),
    describeLogGroups: jest.fn().mockImplementation(({ logGroupNamePrefix }) => {
        var _a, _b;
        const groups = (_b = (_a = logGroups[logGroupNamePrefix]) === null || _a === void 0 ? void 0 : _a.config) !== null && _b !== void 0 ? _b : { logGroups: [] };
        return {
            promise: () => Promise.resolve(groups),
        };
    }),
    describeSubscriptionFilters: jest.fn().mockImplementation(({ logGroupName }) => {
        var _a, _b;
        const groups = (_b = (_a = logGroups[logGroupName]) === null || _a === void 0 ? void 0 : _a.filters) !== null && _b !== void 0 ? _b : { subscriptionFilters: [] };
        return {
            promise: () => Promise.resolve(groups),
        };
    }),
    putSubscriptionFilter: jest.fn().mockImplementation(() => ({ promise: () => Promise.resolve() })),
});
exports.makeMockCloudWatchLogs = makeMockCloudWatchLogs;
exports.mockAwsAccount = '123456789012';
exports.mockAwsAccessKeyId = 'M0CKAWS4CC3SSK3Y1DSL';
exports.mockAwsSecretAccessKey = 'M0CKAWSs3cR3T4cC3SSK3YS3rv3rL3SSD4tad0g0';
exports.mockDatadogApiKey = '02aeb762fff59ac0d5ad1536cd9633bd';
exports.mockDatadogEnv = 'sandbox';
exports.mockDatadogService = 'testServiceName';
exports.mockDatadogVersion = '1.0.0';
//# sourceMappingURL=fixtures.js.map