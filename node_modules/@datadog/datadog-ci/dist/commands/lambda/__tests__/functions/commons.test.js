"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-string-literal */
const aws_sdk_1 = require("aws-sdk");
jest.mock('aws-sdk');
const aws_sdk_2 = require("aws-sdk");
const constants_1 = require("../../constants");
const commons_1 = require("../../functions/commons");
const instrument_1 = require("../../instrument");
const fixtures_1 = require("../fixtures");
describe('commons', () => {
    describe('addLayerArn', () => {
        test('adds layers and removes previous versions', () => {
            const runtime = 'python3.9';
            const config = {
                Runtime: runtime,
            };
            let layerARNs = [
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Python39:48',
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:10',
            ];
            const region = 'sa-east-1';
            const lambdaLibraryLayerName = constants_1.LAYER_LOOKUP[runtime];
            const fullLambdaLibraryLayerArn = commons_1.getLayerArn(config, config.Runtime, region) + ':49';
            const fullExtensionLayerArn = commons_1.getLayerArn(config, constants_1.EXTENSION_LAYER_KEY, region) + ':11';
            layerARNs = commons_1.addLayerArn(fullLambdaLibraryLayerArn, lambdaLibraryLayerName, layerARNs);
            layerARNs = commons_1.addLayerArn(fullExtensionLayerArn, constants_1.DD_LAMBDA_EXTENSION_LAYER_NAME, layerARNs);
            expect(layerARNs).toEqual([
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Python39:49',
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:11',
            ]);
        });
        test('swaps layers if architecture is arm64', () => {
            const runtime = 'python3.9';
            const config = {
                Architectures: ['arm64'],
                Runtime: runtime,
            };
            let layerARNs = [
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Python39:49',
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:11',
            ];
            const region = 'sa-east-1';
            const lambdaLibraryLayerName = constants_1.LAYER_LOOKUP[runtime];
            const fullLambdaLibraryLayerArn = commons_1.getLayerArn(config, config.Runtime, region) + ':49';
            const fullExtensionLayerArn = commons_1.getLayerArn(config, constants_1.EXTENSION_LAYER_KEY, region) + ':11';
            layerARNs = commons_1.addLayerArn(fullLambdaLibraryLayerArn, lambdaLibraryLayerName, layerARNs);
            layerARNs = commons_1.addLayerArn(fullExtensionLayerArn, constants_1.DD_LAMBDA_EXTENSION_LAYER_NAME, layerARNs);
            expect(layerARNs).toEqual([
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Python39-ARM:49',
                'arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension-ARM:11',
            ]);
        });
    });
    describe('coerceBoolean', () => {
        test('return fallback when none of the values provided can be parsed to boolean', () => {
            expect(commons_1.coerceBoolean(true, 'NotBoolean', 123, [], {})).toBe(true);
            expect(commons_1.coerceBoolean(false, 'NotBooleanEither', 456, ['An array'], { booleanInObject: true })).toBe(false);
        });
        test('return the first boolean when one of the values provided can be parsed to boolean', () => {
            expect(commons_1.coerceBoolean(true, 'false', 'true')).toBe(false);
            expect(commons_1.coerceBoolean(false, 'true', 'False')).toBe(true);
        });
        test('return the first boolean when one of the values provided is boolean', () => {
            expect(commons_1.coerceBoolean(true, false, 'truE', true)).toBe(false);
            expect(commons_1.coerceBoolean(false, true, 'False', false)).toBe(true);
        });
    });
    describe('collectFunctionsByRegion', () => {
        test('groups functions with region read from arn', () => {
            process.env = {};
            const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
            const region = 'us-east-1';
            command['functions'] = [
                'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                'arn:aws:lambda:us-east-1:123456789012:function:another',
                'arn:aws:lambda:us-east-2:123456789012:function:third-func',
            ];
            expect(commons_1.collectFunctionsByRegion(command['functions'], region)).toEqual({
                'us-east-1': [
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    'arn:aws:lambda:us-east-1:123456789012:function:another',
                ],
                'us-east-2': ['arn:aws:lambda:us-east-2:123456789012:function:third-func'],
            });
        });
        test('groups functions in the config object', () => {
            process.env = {};
            const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
            const region = 'us-east-1';
            command['config']['functions'] = [
                'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                'arn:aws:lambda:us-east-1:123456789012:function:another',
                'arn:aws:lambda:us-east-2:123456789012:function:third-func',
            ];
            expect(commons_1.collectFunctionsByRegion(command['config']['functions'], region)).toEqual({
                'us-east-1': [
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    'arn:aws:lambda:us-east-1:123456789012:function:another',
                ],
                'us-east-2': ['arn:aws:lambda:us-east-2:123456789012:function:third-func'],
            });
        });
        test('uses default region for functions not in arn format', () => {
            process.env = {};
            const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
            command['functions'] = [
                'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                'arn:aws:lambda:*:123456789012:function:func-with-wildcard',
                'func-without-region',
                'arn:aws:lambda:us-east-2:123456789012:function:third-func',
            ];
            command['region'] = 'ap-south-1';
            expect(commons_1.collectFunctionsByRegion(command['functions'], command['region'])).toEqual({
                'ap-south-1': ['arn:aws:lambda:*:123456789012:function:func-with-wildcard', 'func-without-region'],
                'us-east-1': ['arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world'],
                'us-east-2': ['arn:aws:lambda:us-east-2:123456789012:function:third-func'],
            });
        });
        test('fails to collect when there are regionless functions and no default region is set', () => {
            process.env = {};
            const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
            command['functions'] = [
                'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                'arn:aws:lambda:*:123456789012:function:func-with-wildcard',
                'func-without-region',
                'arn:aws:lambda:us-east-2:123456789012:function:third-func',
            ];
            command['region'] = undefined;
            command['config']['region'] = undefined;
            let functionsGroup;
            try {
                functionsGroup = commons_1.collectFunctionsByRegion(command['functions'], command['region']);
            }
            catch (err) {
                // Do nothing
            }
            expect(functionsGroup).toBeUndefined();
        });
    });
    describe('findLatestLayerVersion', () => {
        test('finds latests version for Python39', () => __awaiter(void 0, void 0, void 0, function* () {
            const layer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Python39`;
            aws_sdk_2.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}, {
                [`${layer}:1`]: {
                    LayerVersionArn: `${layer}:1`,
                    Version: 1,
                },
                [`${layer}:2`]: {
                    LayerVersionArn: `${layer}:2`,
                    Version: 2,
                },
                [`${layer}:10`]: {
                    LayerVersionArn: `${layer}:10`,
                    Version: 10,
                },
                [`${layer}:20`]: {
                    LayerVersionArn: `${layer}:20`,
                    Version: 20,
                },
                [`${layer}:30`]: {
                    LayerVersionArn: `${layer}:30`,
                    Version: 30,
                },
                [`${layer}:31`]: {
                    LayerVersionArn: `${layer}:31`,
                    Version: 31,
                },
                [`${layer}:32`]: {
                    LayerVersionArn: `${layer}:32`,
                    Version: 32,
                },
            }));
            const runtime = 'python3.9';
            const region = 'sa-east-1';
            const expectedLatestVersion = 32;
            const latestVersionFound = yield commons_1.findLatestLayerVersion(runtime, region);
            expect(latestVersionFound).toBe(expectedLatestVersion);
        }));
        test('finds latests version for Node14', () => __awaiter(void 0, void 0, void 0, function* () {
            const layer = `arn:aws:lambda:us-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node14-x`;
            aws_sdk_2.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}, {
                [`${layer}:1`]: {
                    LayerVersionArn: `${layer}:1`,
                    Version: 1,
                },
                [`${layer}:10`]: {
                    LayerVersionArn: `${layer}:10`,
                    Version: 10,
                },
                [`${layer}:20`]: {
                    LayerVersionArn: `${layer}:20`,
                    Version: 20,
                },
                [`${layer}:30`]: {
                    LayerVersionArn: `${layer}:30`,
                    Version: 30,
                },
                [`${layer}:40`]: {
                    LayerVersionArn: `${layer}:40`,
                    Version: 40,
                },
                [`${layer}:41`]: {
                    LayerVersionArn: `${layer}:41`,
                    Version: 41,
                },
            }));
            const runtime = 'nodejs14.x';
            const region = 'us-east-1';
            const expectedLatestVersion = 41;
            const latestVersionFound = yield commons_1.findLatestLayerVersion(runtime, region);
            expect(latestVersionFound).toBe(expectedLatestVersion);
        }));
        test('returns 0 when no layer can be found', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            aws_sdk_2.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}, {}));
            const runtime = 'python3.7';
            const region = 'us-east-1';
            const expectedLatestVersion = 0;
            const latestVersionFound = yield commons_1.findLatestLayerVersion(runtime, region);
            expect(latestVersionFound).toBe(expectedLatestVersion);
        }));
    });
    describe('isMissingAWSCredentials', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns true when only AWS_SECRET_ACCESS_KEY env var is set and `~/.aws/credentials` are missing', () => {
            process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = 'SOME-AWS-SECRET-ACCESS-KEY';
            aws_sdk_1.config.credentials = undefined;
            expect(commons_1.isMissingAWSCredentials()).toBe(true); // We return true since AWS_ACCESS_KEY_ID_ENV_VAR is missing
        });
        test('returns true when only AWS_ACCESS_KEY_ID environment variable is set and `~/.aws/credentials` are missing', () => {
            process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = 'SOME-AWS-ACCESS-KEY-ID';
            aws_sdk_1.config.credentials = undefined;
            expect(commons_1.isMissingAWSCredentials()).toBe(true); // We return true since AWS_SECRET_ACCESS_KEY_ENV_VAR is missing
        });
        test('returns false when AWS credentials via environment variables are set', () => {
            process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = 'SOME-AWS-ACCESS-KEY-ID';
            process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = 'SOME-AWS-SECRET-ACCESS-KEY';
            aws_sdk_1.config.credentials = { foo: 'bar' };
            expect(commons_1.isMissingAWSCredentials()).toBe(false);
        });
        test('returns true when both environment variables and `~/.aws/credentials` are missing', () => {
            aws_sdk_1.config.credentials = undefined;
            expect(commons_1.isMissingAWSCredentials()).toBe(true);
        });
        test('returns false when AWS credentials via `~/.aws/credentials` are set', () => {
            aws_sdk_1.config.credentials = { foo: 'bar' };
            expect(commons_1.isMissingAWSCredentials()).toBe(false);
        });
    });
    describe('isMissingDatadogEnvVars', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns true when any Datadog Env Var is missing', () => {
            process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(true);
            // Reset env
            process.env = {};
            process.env[constants_1.CI_API_KEY_ENV_VAR] = 'SOME-DATADOG-API-KEY';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(true);
            process.env = {};
            process.env[constants_1.CI_KMS_API_KEY_ENV_VAR] = 'SOME-AWS-KMS-API-KEY-CONTAINING-DATADOG-API-KEY';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(true);
            process.env = {};
            process.env[constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR] = 'SOME-AWS-SECRET-ARN-CONTAINING-DATADOG-API-KEY';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(true);
        });
        test('returns false when Datadog Env Vars are set with DATADOG_API_KEY', () => {
            process.env[constants_1.CI_API_KEY_ENV_VAR] = 'SOME-DATADOG-API-KEY';
            process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(false);
        });
        test('returns false when Datadog Env Vars are set with DATADOG_KMS_API_KEY', () => {
            process.env[constants_1.CI_KMS_API_KEY_ENV_VAR] = 'SOME-AWS-KMS-API-KEY-CONTAINING-DATADOG-API-KEY';
            process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(false);
        });
        test('returns false when Datadog Env Vars are set with DATADOG_API_KEY_SECRET_ARN', () => {
            process.env[constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR] = 'SOME-AWS-SECRET-ARN-CONTAINING-DATADOG-API-KEY';
            process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
            expect(commons_1.isMissingDatadogEnvVars()).toBe(false);
        });
    });
    describe('isMissingDatadogSiteEnvVar', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns true when Datadog Site Env Var is missing', () => {
            expect(commons_1.isMissingDatadogSiteEnvVar()).toBe(true);
        });
        test('returns false when Datadog Site Env Var is set', () => {
            process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
            expect(commons_1.isMissingDatadogSiteEnvVar()).toBe(false);
        });
        test('returns true when Datadog Site Env Var is set and is not a valid Datadog site', () => {
            process.env[constants_1.CI_SITE_ENV_VAR] = 'datacathq.com';
            expect(commons_1.isMissingDatadogSiteEnvVar()).toBe(true);
        });
    });
    describe('isMissingAnyDatadogApiKeyEnvVar', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns true when no Datadog Api Key is set', () => {
            expect(commons_1.isMissingAnyDatadogApiKeyEnvVar()).toBe(true);
        });
        test('returns false when DATADOG_API_KEY is set', () => {
            process.env[constants_1.CI_API_KEY_ENV_VAR] = 'SOME-DATADOG-API-KEY';
            expect(commons_1.isMissingAnyDatadogApiKeyEnvVar()).toBe(false);
        });
        test('returns false when DATADOG_KMS_API_KEY is set', () => {
            process.env[constants_1.CI_KMS_API_KEY_ENV_VAR] = 'SOME-AWS-KMS-API-KEY-CONTAINING-DATADOG-API-KEY';
            expect(commons_1.isMissingAnyDatadogApiKeyEnvVar()).toBe(false);
        });
        test('returns false when DATADOG_API_KEY_SECRET_ARN is set', () => {
            process.env[constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR] = 'SOME-AWS-SECRET-ARN-CONTAINING-DATADOG-API-KEY';
            expect(commons_1.isMissingAnyDatadogApiKeyEnvVar()).toBe(false);
        });
    });
    describe('getLayerArn', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('gets sa-east-1 Lambda Extension layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const layerArn = commons_1.getLayerArn({}, constants_1.EXTENSION_LAYER_KEY, region, settings);
            expect(layerArn).toEqual(`arn:aws:lambda:${region}:${fixtures_1.mockAwsAccount}:layer:Datadog-Extension`);
        }));
        test('gets sa-east-1 arm64 Lambda Extension layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const config = {
                Architectures: ['arm64'],
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const layerArn = commons_1.getLayerArn(config, constants_1.EXTENSION_LAYER_KEY, region, settings);
            expect(layerArn).toEqual(`arn:aws:lambda:${region}:${fixtures_1.mockAwsAccount}:layer:Datadog-Extension-ARM`);
        }));
        test('gets us-gov-1 gov cloud Lambda Extension layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'us-gov-1';
            const layerArn = commons_1.getLayerArn({}, constants_1.EXTENSION_LAYER_KEY, region, settings);
            expect(layerArn).toEqual(`arn:aws-us-gov:lambda:${region}:${constants_1.GOVCLOUD_LAYER_AWS_ACCOUNT}:layer:Datadog-Extension`);
        }));
        test('gets us-gov-1 gov cloud arm64 Lambda Extension layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const config = {
                Architectures: ['arm64'],
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'us-gov-1';
            const layerArn = commons_1.getLayerArn(config, constants_1.EXTENSION_LAYER_KEY, region, settings);
            expect(layerArn).toEqual(`arn:aws-us-gov:lambda:${region}:${constants_1.GOVCLOUD_LAYER_AWS_ACCOUNT}:layer:Datadog-Extension-ARM`);
        }));
        test('gets sa-east-1 Node12 Lambda Library layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'nodejs12.x';
            const config = {
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const layerArn = commons_1.getLayerArn(config, config.Runtime, region, settings);
            expect(layerArn).toEqual(`arn:aws:lambda:${region}:${fixtures_1.mockAwsAccount}:layer:Datadog-Node12-x`);
        }));
        test('gets sa-east-1 Python3.9 arm64 Lambda Library layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'python3.9';
            const config = {
                Architectures: ['arm64'],
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const layerArn = commons_1.getLayerArn(config, config.Runtime, region, settings);
            expect(layerArn).toEqual(`arn:aws:lambda:${region}:${fixtures_1.mockAwsAccount}:layer:Datadog-Python39-ARM`);
        }));
        test('gets us-gov-1 Python37 gov cloud Lambda Library layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'python3.7';
            const config = {
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'us-gov-1';
            const layerArn = commons_1.getLayerArn(config, config.Runtime, region, settings);
            expect(layerArn).toEqual(`arn:aws-us-gov:lambda:${region}:${constants_1.GOVCLOUD_LAYER_AWS_ACCOUNT}:layer:Datadog-Python37`);
        }));
        test('gets us-gov-1 Python39 gov cloud arm64 Lambda Library layer ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'python3.9';
            const config = {
                Architectures: ['arm64'],
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'us-gov-1';
            const layerArn = commons_1.getLayerArn(config, config.Runtime, region, settings);
            expect(layerArn).toEqual(`arn:aws-us-gov:lambda:${region}:${constants_1.GOVCLOUD_LAYER_AWS_ACCOUNT}:layer:Datadog-Python39-ARM`);
        }));
    });
    describe('getLayerNameWithVersion', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns the correct name and version given an extension layer arn', () => {
            const layerName = constants_1.DD_LAMBDA_EXTENSION_LAYER_NAME;
            const version = '16';
            const layerNameWithVersion = `${layerName}:${version}`;
            const layerArn = `arn:aws:lambda:sa-east-1:${fixtures_1.mockAwsAccount}:layer:${layerNameWithVersion}`;
            expect(commons_1.getLayerNameWithVersion(layerArn)).toBe(layerNameWithVersion);
        });
        test('returns the correct name and version given a library layer arn', () => {
            const layerName = 'Datadog-Python39';
            const version = '59';
            const layerNameWithVersion = `${layerName}:${version}`;
            const layerArn = `arn:aws:lambda:sa-east-1:${fixtures_1.mockAwsAccount}:layer:${layerNameWithVersion}`;
            expect(commons_1.getLayerNameWithVersion(layerArn)).toBe(layerNameWithVersion);
        });
        test('returns undefined if arn is incomplete', () => {
            const layerArn = `arn:aws:lambda:sa-east-1:${fixtures_1.mockAwsAccount}:layer:Datadog-Python39`;
            expect(commons_1.getLayerNameWithVersion(layerArn)).toBe(undefined);
        });
    });
    describe('getRegion', () => {
        test('should return the expected region', () => {
            const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
            const expectedRegion = 'us-east-1';
            const region = commons_1.getRegion(functionARN);
            expect(region).toBe(expectedRegion);
        });
        test('should return undefined if Function ARN does not contain the region', () => {
            const functionName = 'lambda-hello-world';
            const region = commons_1.getRegion(functionName);
            expect(region).toBe(undefined);
        });
    });
    describe('sentenceMatchesRegEx', () => {
        const tags = [
            ['not-complying:regex-should-fail', false],
            ['1first-char-is-number:should-fail', false],
            ['_also-not-complying:should-fail', false],
            ['complying_tag:accepted/with/slashes.and.dots,but-empty-tag', false],
            ['also_complying:success,1but_is_illegal:should-fail', false],
            ['this:complies,also_this_one:yes,numb3r_in_name:should-succeed,dots:al.lo.wed', true],
            ['complying_ip_address_4:192.342.3134.231', true],
            ['complying:alone', true],
            ['one_divided_by_two:1/2,one_divided_by_four:0.25,three_minus_one_half:3-1/2', true],
            ['this_is_a_valid_t4g:yes/it.is-42', true],
        ];
        test.each(tags)('check if the tags match the expected result from the regex', (tag, expectedResult) => {
            const result = !!commons_1.sentenceMatchesRegEx(tag, constants_1.EXTRA_TAGS_REG_EXP);
            expect(result).toEqual(expectedResult);
        });
    });
    describe('updateLambdaConfigs', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('updates every lambda', () => __awaiter(void 0, void 0, void 0, function* () {
            const lambda = fixtures_1.makeMockLambda({});
            const configs = [
                {
                    functionARN: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    lambdaConfig: {
                        FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                    lambdaLibraryLayerArn: 'arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x',
                    updateRequest: {
                        Environment: {
                            Variables: {
                                [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'index.handler',
                                [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                                [constants_1.TRACE_ENABLED_ENV_VAR]: 'false',
                            },
                        },
                        FunctionName: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                        Handler: '/opt/nodejs/node_modules/datadog-lambda-js/handler.handler',
                        Layers: ['arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22'],
                    },
                },
            ];
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            yield commons_1.updateLambdaFunctionConfigs(lambda, cloudWatch, configs);
            expect(lambda.updateFunctionConfiguration).toHaveBeenCalledWith({
                Environment: {
                    Variables: {
                        [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'index.handler',
                        [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                        [constants_1.TRACE_ENABLED_ENV_VAR]: 'false',
                    },
                },
                FunctionName: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                Handler: '/opt/nodejs/node_modules/datadog-lambda-js/handler.handler',
                Layers: ['arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22'],
            });
        }));
    });
    describe('Correctly handles multiple runtimes', () => {
        test('returns true if all runtimes are uniform', () => __awaiter(void 0, void 0, void 0, function* () {
            const configs = [
                {
                    functionARN: 'arn:aws:lambda:us-east-1:000000000000:function:func1',
                    lambdaConfig: {
                        FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:func1',
                        Handler: 'index.handler',
                        Runtime: 'nodejs14.x',
                    },
                },
                {
                    functionARN: 'arn:aws:lambda:us-east-1:000000000000:function:func2',
                    lambdaConfig: {
                        FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:func2',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                },
                {
                    functionARN: 'arn:aws:lambda:us-east-1:000000000000:function:func3',
                    lambdaConfig: {
                        FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:func3',
                        Handler: 'index.handler',
                        Runtime: 'nodejs16.x',
                    },
                },
            ];
            expect(commons_1.checkRuntimeTypesAreUniform(configs)).toBe(true);
        }));
        test('returns false if runtimes are not uniform', () => __awaiter(void 0, void 0, void 0, function* () {
            const configs = [
                {
                    functionARN: 'arn:aws:lambda:us-east-1:000000000000:function:func1',
                    lambdaConfig: {
                        FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:func1',
                        Handler: 'index.handler',
                        Runtime: 'nodejs14.x',
                    },
                },
                {
                    functionARN: 'arn:aws:lambda:us-east-1:000000000000:function:func2',
                    lambdaConfig: {
                        FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:func2',
                        Handler: 'index.handler',
                        Runtime: 'python3.9',
                    },
                },
            ];
            expect(commons_1.checkRuntimeTypesAreUniform(configs)).toBe(false);
        }));
    });
});
//# sourceMappingURL=commons.test.js.map