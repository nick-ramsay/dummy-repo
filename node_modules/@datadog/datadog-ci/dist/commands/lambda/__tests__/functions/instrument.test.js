"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../loggroup');
const constants_1 = require("../../constants");
const instrument_1 = require("../../functions/instrument");
const loggroup = __importStar(require("../../loggroup"));
const fixtures_1 = require("../fixtures");
describe('instrument', () => {
    describe('calculateUpdateRequest', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('calculates an update request with just lambda library layers', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'nodejs12.x';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 5,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_FLUSH_TO_LOG": "false",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world",
          "Handler": "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler",
          "Layers": Array [
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Node12-x:5",
          ],
        }
      `);
        }));
        test('calculates an update request with just lambda library layers in arm architecture', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'python3.9';
            const config = {
                Architectures: ['arm64'],
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'handler.hello',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 11,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_FLUSH_TO_LOG": "false",
              "DD_LAMBDA_HANDLER": "handler.hello",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
          "Layers": Array [
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Python39-ARM:11",
          ],
        }
      `);
        }));
        test('calculates an update request with a lambda library, extension, and DATADOG_API_KEY', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env[constants_1.CI_API_KEY_ENV_VAR] = '1234';
            const runtime = 'nodejs12.x';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                extensionVersion: 6,
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 5,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_API_KEY": "1234",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world",
          "Handler": "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler",
          "Layers": Array [
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Extension:6",
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Node12-x:5",
          ],
        }
      `);
        }));
        test('calculates an update request with a lambda library, extension, and DATADOG_API_KEY_SECRET_ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env[constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR] = 'some-secret:arn:from:aws';
            const runtime = 'python3.9';
            const config = {
                FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                extensionVersion: 11,
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 49,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_API_KEY_SECRET_ARN": "some-secret:arn:from:aws",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
          "Layers": Array [
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Extension:11",
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Python39:49",
          ],
        }
      `);
        }));
        test('calculates an update request with a lambda library, extension, and DATADOG_KMS_API_KEY', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env[constants_1.CI_KMS_API_KEY_ENV_VAR] = '5678';
            const runtime = 'python3.6';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                extensionVersion: 6,
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 5,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_KMS_API_KEY": "5678",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
          "Layers": Array [
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Extension:6",
            "arn:aws:lambda:sa-east-1:123456789012:layer:Datadog-Python36:5",
          ],
        }
      `);
        }));
        test('prioritizes the KMS API KEY when all of them are exported', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env = {
                [constants_1.CI_API_KEY_ENV_VAR]: '1234',
                [constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR]: '5678',
                [constants_1.CI_KMS_API_KEY_ENV_VAR]: 'should-be-selected',
            };
            const config = {
                FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
            };
            const runtime = 'python3.9';
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, {}, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_KMS_API_KEY": "should-be-selected",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_SITE": "datadoghq.com",
            },
          },
          "FunctionName": "arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
        }
      `);
        }));
        test("doesn't set DD_FLUSH_TO_LOGS when extension is being used", () => __awaiter(void 0, void 0, void 0, function* () {
            process.env[constants_1.CI_API_KEY_ENV_VAR] = '1234';
            const config = {
                FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
            };
            const runtime = 'python3.9';
            const region = 'sa-east-1';
            const settings = {
                extensionVersion: 13,
                flushMetricsToLogs: true,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_API_KEY": "1234",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
          "Layers": Array [
            "arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:13",
          ],
        }
      `);
        }));
        test('by default calculates an update request with DATADOG_SITE being set to datadoghq.com', () => __awaiter(void 0, void 0, void 0, function* () {
            const runtime = 'python3.6';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_FLUSH_TO_LOG": "false",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
        }
      `);
        }));
        test('calculates an update request with DATADOG_SITE being set to datadoghq.eu', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env.DATADOG_SITE = 'datadoghq.eu';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'sa-east-1';
            const runtime = 'python3.6';
            const updateRequest = yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            expect(updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_FLUSH_TO_LOG": "false",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.eu",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world",
          "Handler": "datadog_lambda.handler.handler",
        }
      `);
        }));
        test('throws an error when an invalid DATADOG_SITE url is given', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env.DATADOG_SITE = 'datacathq.eu';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
            };
            const settings = {
                flushMetricsToLogs: false,
                interactive: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 5,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'us-east-1';
            const runtime = 'python3.6';
            let error;
            try {
                yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            }
            catch (e) {
                if (e instanceof Error) {
                    error = e;
                }
            }
            expect(error === null || error === void 0 ? void 0 : error.message).toBe('Warning: Invalid site URL. Must be either datadoghq.com, datadoghq.eu, us3.datadoghq.com, us5.datadoghq.com, or ddog-gov.com.');
        }));
        test('throws an error when neither DATADOG_API_KEY nor DATADOG_KMS_API_KEY are given through the environment while using extensionVersion', () => __awaiter(void 0, void 0, void 0, function* () {
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
            };
            const settings = {
                extensionVersion: 6,
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 5,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const region = 'us-east-1';
            const runtime = 'python3.6';
            let error;
            try {
                yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            }
            catch (e) {
                if (e instanceof Error) {
                    error = e;
                }
            }
            expect(error === null || error === void 0 ? void 0 : error.message).toBe("When 'extensionLayer' is set, DATADOG_API_KEY, DATADOG_KMS_API_KEY, or DATADOG_API_KEY_SECRET_ARN must also be set");
        }));
        test('throws error when trying to add `DD_API_KEY_SECRET_ARN` while using sync metrics in a node runtime', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env[constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR] = 'some-secret:arn:from:aws';
            const runtime = 'nodejs14.x';
            const region = 'us-east-1';
            const config = {
                FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                Handler: 'index.handler',
                Layers: [],
                Runtime: runtime,
            };
            const settings = {
                flushMetricsToLogs: false,
                layerAWSAccount: fixtures_1.mockAwsAccount,
                layerVersion: 13,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            let error;
            try {
                yield instrument_1.calculateUpdateRequest(config, settings, region, runtime);
            }
            catch (e) {
                if (e instanceof Error) {
                    error = e;
                }
            }
            expect(error === null || error === void 0 ? void 0 : error.message).toBe('`apiKeySecretArn` is not supported for Node runtimes when using Synchronous Metrics. Use either `apiKey` or `apiKmsKey`.');
        }));
    });
    describe('getInstrumentedFunctionConfig', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('throws an error when it encounters an unsupported runtime', () => __awaiter(void 0, void 0, void 0, function* () {
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    Runtime: 'go',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                layerVersion: 23,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const config = (yield lambda
                .getFunction({ FunctionName: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument' })
                .promise()).Configuration;
            yield expect(instrument_1.getInstrumentedFunctionConfig(lambda, cloudWatch, config, 'us-east-1', settings)).rejects.toThrow();
        }));
        test('replaces the layer arn when the version has changed', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    Layers: [
                        { Arn: 'arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22' },
                        { Arn: 'arn:aws:lambda:us-east-1:464622532012:layer:AnotherLayer:10' },
                    ],
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                layerVersion: 23,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const config = (yield lambda
                .getFunction({ FunctionName: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument' })
                .promise()).Configuration;
            const result = yield instrument_1.getInstrumentedFunctionConfig(lambda, cloudWatch, config, 'us-east-1', settings);
            expect((_a = result.updateRequest) === null || _a === void 0 ? void 0 : _a.Layers).toMatchInlineSnapshot(`
                      Array [
                        "arn:aws:lambda:us-east-1:464622532012:layer:AnotherLayer:10",
                        "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:23",
                      ]
                `);
        }));
        test('returns configurations without updateRequest when no changes need to be made', () => __awaiter(void 0, void 0, void 0, function* () {
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument': {
                    Environment: {
                        Variables: {
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'false',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'index.handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'false',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    Handler: '/opt/nodejs/node_modules/datadog-lambda-js/handler.handler',
                    Layers: [{ Arn: 'arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22' }],
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                layerVersion: 22,
                logLevel: 'debug',
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const config = (yield lambda
                .getFunction({ FunctionName: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument' })
                .promise()).Configuration;
            expect((yield instrument_1.getInstrumentedFunctionConfig(lambda, cloudWatch, config, 'us-east-1', settings))
                .updateRequest).toBeUndefined();
        }));
        test('uses the GovCloud lambda layer when a GovCloud region is detected', () => __awaiter(void 0, void 0, void 0, function* () {
            var _b;
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws-us-gov:lambda:us-gov-east-1:000000000000:function:autoinstrument': {
                    FunctionArn: 'arn:aws-us-gov:lambda:us-gov-east-1:000000000000:function:autoinstrument',
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                layerVersion: 30,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const config = (yield lambda
                .getFunction({ FunctionName: 'arn:aws-us-gov:lambda:us-gov-east-1:000000000000:function:autoinstrument' })
                .promise()).Configuration;
            const result = yield instrument_1.getInstrumentedFunctionConfig(lambda, cloudWatch, config, 'us-gov-east-1', settings);
            expect((_b = result.updateRequest) === null || _b === void 0 ? void 0 : _b.Layers).toMatchInlineSnapshot(`
                      Array [
                        "arn:aws-us-gov:lambda:us-gov-east-1:002406178527:layer:Datadog-Node12-x:30",
                      ]
                `);
        }));
        test('requests log group configuration when forwarderARN is set', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            loggroup.calculateLogGroupUpdateRequest.mockImplementation(() => ({ logGroupName: '/aws/lambda/group' }));
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    Handler: 'index.handler',
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                forwarderARN: 'my-forwarder',
                layerVersion: 22,
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const config = (yield lambda
                .getFunction({ FunctionName: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument' })
                .promise()).Configuration;
            const result = yield instrument_1.getInstrumentedFunctionConfig(lambda, cloudWatch, config, 'us-east-1', settings);
            expect(result).toBeDefined();
            expect(result.logGroupConfiguration).toMatchInlineSnapshot(`
                Object {
                  "logGroupName": "/aws/lambda/group",
                }
            `);
        }));
    });
    describe('getInstrumentedFunctionConfigs', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns the update request for each function', () => __awaiter(void 0, void 0, void 0, function* () {
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    Handler: 'index.handler',
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                environment: 'staging',
                flushMetricsToLogs: false,
                layerVersion: 22,
                logLevel: 'debug',
                mergeXrayTraces: false,
                service: 'middletier',
                tracingEnabled: false,
                version: '0.2',
            };
            const result = yield instrument_1.getInstrumentedFunctionConfigs(lambda, cloudWatch, 'us-east-1', ['arn:aws:lambda:us-east-1:000000000000:function:autoinstrument'], settings);
            expect(result.length).toEqual(1);
            expect(result[0].updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_ENV": "staging",
              "DD_FLUSH_TO_LOG": "false",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_LOG_LEVEL": "debug",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SERVICE": "middletier",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
              "DD_VERSION": "0.2",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:000000000000:function:autoinstrument",
          "Handler": "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler",
          "Layers": Array [
            "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22",
          ],
        }
      `);
        }));
        test('returns results for multiple functions', () => __awaiter(void 0, void 0, void 0, function* () {
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:another-func': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:another-func',
                    Runtime: 'nodejs12.x',
                },
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument': {
                    Environment: {
                        Variables: {
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'false',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'index.handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                environment: 'staging',
                flushMetricsToLogs: false,
                layerVersion: 23,
                mergeXrayTraces: false,
                service: 'middletier',
                tracingEnabled: false,
                version: '0.2',
            };
            const result = yield instrument_1.getInstrumentedFunctionConfigs(lambda, cloudWatch, 'us-east-1', [
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument',
                'arn:aws:lambda:us-east-1:000000000000:function:another-func',
            ], settings);
            expect(result.length).toEqual(2);
        }));
    });
    describe('getInstrumentedFunctionConfigsFromRegEx', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('returns the update request for each function that matches the pattern', () => __awaiter(void 0, void 0, void 0, function* () {
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument-scooby': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument-scooby',
                    FunctionName: 'autoinstrument-scooby',
                    Handler: 'index.handler',
                    Runtime: 'nodejs12.x',
                },
                'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument-scr.': {
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:autoinstrument-scr.',
                    FunctionName: 'autoinstrument-scr.',
                    Handler: 'index.handler',
                    Runtime: 'nodejs12.x',
                },
            });
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                layerVersion: 22,
                logLevel: 'debug',
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            const result = yield instrument_1.getInstrumentedFunctionConfigsFromRegEx(lambda, cloudWatch, 'us-east-1', 'autoinstrument-scr.', settings);
            expect(result.length).toEqual(1);
            expect(result[0].updateRequest).toMatchInlineSnapshot(`
        Object {
          "Environment": Object {
            "Variables": Object {
              "DD_FLUSH_TO_LOG": "false",
              "DD_LAMBDA_HANDLER": "index.handler",
              "DD_LOG_LEVEL": "debug",
              "DD_MERGE_XRAY_TRACES": "false",
              "DD_SITE": "datadoghq.com",
              "DD_TRACE_ENABLED": "false",
            },
          },
          "FunctionName": "arn:aws:lambda:us-east-1:000000000000:function:autoinstrument-scr.",
          "Handler": "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler",
          "Layers": Array [
            "arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22",
          ],
        }
      `);
        }));
        test('fails when retry count is exceeded', () => __awaiter(void 0, void 0, void 0, function* () {
            const makeMockLambdaListFunctionsError = () => ({
                listFunctions: jest.fn().mockImplementation((args) => ({
                    promise: () => Promise.reject('ListFunctionsError'),
                })),
            });
            const lambda = makeMockLambdaListFunctionsError();
            const cloudWatch = fixtures_1.makeMockCloudWatchLogs({});
            const settings = {
                flushMetricsToLogs: false,
                layerVersion: 22,
                logLevel: 'debug',
                mergeXrayTraces: false,
                tracingEnabled: false,
            };
            yield expect(instrument_1.getInstrumentedFunctionConfigsFromRegEx(lambda, cloudWatch, 'us-east-1', 'fake-pattern', settings)).rejects.toStrictEqual(new Error('Max retry count exceeded. ListFunctionsError'));
        }));
    });
});
//# sourceMappingURL=instrument.test.js.map