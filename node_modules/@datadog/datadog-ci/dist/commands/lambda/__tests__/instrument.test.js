"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-string-literal
jest.mock('fs');
jest.mock('aws-sdk');
jest.mock('../prompt');
const aws_sdk_1 = require("aws-sdk");
const chalk_1 = require("chalk");
const advanced_1 = require("clipanion/lib/advanced");
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const instrument_1 = require("../instrument");
const prompt_1 = require("../prompt");
const fixtures_1 = require("./fixtures");
// tslint:disable-next-line
const { version } = require(path_1.default.join(__dirname, '../../../../package.json'));
describe('lambda', () => {
    describe('instrument', () => {
        describe('execute', () => {
            const OLD_ENV = process.env;
            beforeEach(() => {
                jest.resetModules();
                process.env = {};
            });
            afterAll(() => {
                process.env = OLD_ENV;
            });
            test('prints dry run data for lambda library layer', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '--layerVersion',
                    '10',
                    '--logLevel',
                    'debug',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                    '--extra-tags',
                    'layer:api,team:intake',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.
\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world')}\n
${chalk_1.bold(chalk_1.cyan('[Dry Run] '))}Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_ENV\\": \\"staging\\",
      \\"DD_TAGS\\": \\"layer:api,team:intake\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_SERVICE\\": \\"middletier\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_VERSION\\": \\"0.2\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\",
      \\"DD_LOG_LEVEL\\": \\"debug\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:10\\"
  ]
}
TagResource -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
"
`);
            }));
            test('prints dry run data for lambda library and extension layers using kebab case args', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                    '--extra-tags',
                    'layer:api,team:intake',
                    '--layer-version',
                    '10',
                    '--extension-version',
                    '5',
                    '--merge-xray-traces',
                    'true',
                    '--flush-metrics-to-logs',
                    'false',
                    '--log-level',
                    'debug',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.
\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world')}\n
${chalk_1.bold(chalk_1.cyan('[Dry Run] '))}Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"1234\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_ENV\\": \\"staging\\",
      \\"DD_TAGS\\": \\"layer:api,team:intake\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"true\\",
      \\"DD_SERVICE\\": \\"middletier\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_VERSION\\": \\"0.2\\",
      \\"DD_LOG_LEVEL\\": \\"debug\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Extension:5\\",
    \\"arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:10\\"
  ]
}
TagResource -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
"
`);
            }));
            test('prints dry run data for lambda extension layer', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '--extensionVersion',
                    '6',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                    '--extra-tags',
                    'layer:api,team:intake',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.
\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world')}\n
${chalk_1.bold(chalk_1.cyan('[Dry Run] '))}Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"1234\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_ENV\\": \\"staging\\",
      \\"DD_TAGS\\": \\"layer:api,team:intake\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_SERVICE\\": \\"middletier\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_VERSION\\": \\"0.2\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Extension:6\\"
  ]
}
TagResource -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
"
`);
            }));
            test('prints dry run data for lambda .NET layer', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Runtime: 'dotnetcore3.1',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '-v',
                    '129',
                    '--extra-tags',
                    'layer:api,team:intake',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.
\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world')}\n
${chalk_1.bold(chalk_1.cyan('[Dry Run] '))}Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_API_KEY\\": \\"1234\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_ENV\\": \\"staging\\",
      \\"DD_TAGS\\": \\"layer:api,team:intake\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_SERVICE\\": \\"middletier\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_VERSION\\": \\"0.2\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\",
      \\"CORECLR_ENABLE_PROFILING\\": \\"1\\",
      \\"CORECLR_PROFILER\\": \\"{846F5F1C-F9AE-4B07-969E-05C26BC060D8}\\",
      \\"CORECLR_PROFILER_PATH\\": \\"/opt/datadog/Datadog.Trace.ClrProfiler.Native.so\\",
      \\"DD_DOTNET_TRACER_HOME\\": \\"/opt/datadog\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:us-east-1:464622532012:layer:dd-trace-dotnet:129\\"
  ]
}
TagResource -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
"
`);
            }));
            test('instrumenting with source code integrations fails if not run within a git repo', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                process.env.DATADOG_API_KEY = '1234';
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                    '-s',
                    '--service',
                    'dummy',
                    '--env',
                    'dummy',
                    '--version',
                    '0.1',
                ], context);
                const output = context.stdout.toString();
                expect(output.replace('\n', '')).toMatch(/.*Error: Couldn't get local git status.*/);
            }));
            test('instrumenting with source code integrations fails if DATADOG_API_KEY is not provided', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                    '-s',
                    '--service',
                    'dummy',
                    '--env',
                    'dummy',
                    '--version',
                    '0.1',
                ], context);
                const output = context.stdout.toString();
                expect(output).toMatch(/.*Missing DATADOG_API_KEY in your environment.*/i);
            }));
            test('ensure the instrument command ran from a dirty git repo fails', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                process.env.DATADOG_API_KEY = '1234';
                const context = fixtures_1.createMockContext();
                const instrumentCommand = instrument_1.InstrumentCommand;
                const mockGitStatus = jest.spyOn(instrumentCommand.prototype, 'getCurrentGitStatus');
                mockGitStatus.mockImplementation(() => ({
                    ahead: 0,
                    isClean: false,
                }));
                const cli = new advanced_1.Cli();
                cli.register(instrumentCommand);
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                    '-s',
                    '--service',
                    'dummy',
                    '--env',
                    'dummy',
                    '--version',
                    '0.1',
                ], context);
                const output = context.stdout.toString();
                expect(output).toMatch('Error: Local git repository is dirty');
            }));
            test('ensure source code integration flag works from a clean repo', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                process.env.DATADOG_API_KEY = '1234';
                const context = fixtures_1.createMockContext();
                const instrumentCommand = instrument_1.InstrumentCommand;
                const mockGitStatus = jest.spyOn(instrumentCommand.prototype, 'getCurrentGitStatus');
                mockGitStatus.mockImplementation(() => ({
                    ahead: 0,
                    hash: '1be168ff837f043bde17c0314341c84271047b31',
                    isClean: true,
                }));
                const mockUploadFunction = jest.spyOn(instrumentCommand.prototype, 'uploadGitData');
                mockUploadFunction.mockImplementation(() => {
                    return;
                });
                const cli = new advanced_1.Cli();
                cli.register(instrumentCommand);
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                    '-s',
                    '--service',
                    'dummy',
                    '--env',
                    'dummy',
                    '--version',
                    '0.1',
                ], context);
                const output = context.stdout.toString();
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.
\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world')}\n
Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"1234\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_ENV\\": \\"dummy\\",
      \\"DD_TAGS\\": \\"git.commit.sha:1be168ff837f043bde17c0314341c84271047b31\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_SERVICE\\": \\"dummy\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_VERSION\\": \\"0.1\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:10\\"
  ]
}
TagResource -> arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
"
`);
            }));
            test('ensure the instrument command ran from a local git repo ahead of the origin fails', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                process.env.DATADOG_API_KEY = '1234';
                const context = fixtures_1.createMockContext();
                const instrumentCommand = instrument_1.InstrumentCommand;
                const mockGitStatus = jest.spyOn(instrumentCommand.prototype, 'getCurrentGitStatus');
                mockGitStatus.mockImplementation(() => ({
                    ahead: 1,
                    isClean: true,
                }));
                const cli = new advanced_1.Cli();
                cli.register(instrumentCommand);
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                    '-s',
                    '--service',
                    'dummy',
                    '--env',
                    'dummy',
                    '--version',
                    '0.1',
                ], context);
                const output = context.stdout.toString();
                expect(output).toMatch('Error: Local changes have not been pushed remotely. Aborting git upload.');
            }));
            test('runs function update command for lambda library layer', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                ], context);
                expect(lambda.updateFunctionConfiguration).toHaveBeenCalled();
            }));
            test('runs function update command for lambda extension layer', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                const lambda = fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                });
                aws_sdk_1.Lambda.mockImplementation(() => lambda);
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                process.env.DATADOG_API_KEY = '1234';
                yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--extensionVersion',
                    '6',
                ], context);
                expect(lambda.updateFunctionConfiguration).toHaveBeenCalled();
            }));
            test('aborts early when no functions are specified', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '--layerVersion',
                    '10',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
                                                            "${chalk_1.red('[Error]')} No functions specified for instrumentation.
                                                            "
                                                `);
            }));
            test('aborts early when no functions are specified while using config file', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['layerVersion'] = '60';
                command['config']['extensionVersion'] = '10';
                command['config']['region'] = 'ap-southeast-1';
                command['config']['service'] = 'middletier';
                command['config']['environment'] = 'staging';
                command['config']['version'] = '0.2';
                yield command['execute']();
                const output = command.context.stdout.toString();
                expect(output).toMatchInlineSnapshot(`
                                                            "${chalk_1.red('[Error]')} No functions specified for instrumentation.
                                                            "
                                                `);
            }));
            test("aborts early when function regions can't be found", () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'my-func',
                    '--layerVersion',
                    '10',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatch(`Couldn't group functions. Error: No default region specified for ["my-func"]. Use -r, --region, or use a full functionARN\n`);
            }));
            test('aborts if a function is not in an Active state with LastUpdateStatus Successful', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Handler: 'index.handler',
                        LastUpdateStatus: 'Unsuccessful',
                        Runtime: 'nodejs12.x',
                        State: 'Failed',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                    '--layerVersion',
                    '10',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
                                                  "${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Can't instrument arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world, as current State is Failed (must be \\"Active\\") and Last Update Status is Unsuccessful (must be \\"Successful\\")
                                                  "
                                        `);
            }));
            test('aborts early when extensionVersion and forwarder are set', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '--function',
                    'test-function-arn',
                    '--forwarder',
                    'arn:aws:lambda:sa-east-1:000000000000:function:datadog-forwarder',
                    '--extensionVersion',
                    '6',
                    '--region',
                    'us-east-1',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
          "${chalk_1.red('[Error]')} \\"extensionVersion\\" and \\"forwarder\\" should not be used at the same time.
          "
        `);
            }));
            test('check if functions are not empty while using config file', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['layerVersion'] = '60';
                command['config']['extensionVersion'] = '10';
                command['config']['region'] = 'ap-southeast-1';
                command['config']['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
                yield command['execute']();
                expect(command['config']['functions']).toHaveLength(1);
            }));
            test('aborts if functions and a pattern are set at the same time', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                let command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['environment'] = 'staging';
                command['config']['service'] = 'middletier';
                command['config']['version'] = '2';
                command['config']['region'] = 'ap-southeast-1';
                command['config']['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
                command['regExPattern'] = 'valid-pattern';
                yield command['execute']();
                let output = command.context.stdout.toString();
                expect(output).toMatch('Functions in config file and "--functions-regex" should not be used at the same time.\n');
                command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['environment'] = 'staging';
                command['service'] = 'middletier';
                command['version'] = '2';
                command['region'] = 'ap-southeast-1';
                command['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
                command['regExPattern'] = 'valid-pattern';
                yield command['execute']();
                output = command.context.stdout.toString();
                expect(output).toMatch('"--functions" and "--functions-regex" should not be used at the same time.\n');
            }));
            test('aborts if pattern is set and no default region is specified', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['environment'] = 'staging';
                command['service'] = 'middletier';
                command['version'] = '2';
                command['regExPattern'] = 'valid-pattern';
                yield command['execute']();
                const output = command.context.stdout.toString();
                expect(output).toMatch(`${chalk_1.red('[Error]')} No default region specified. Use \`-r\`, \`--region\`.\n`);
            }));
            test('aborts if the regEx pattern is an ARN', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['environment'] = 'staging';
                command['service'] = 'middletier';
                command['version'] = '2';
                command['region'] = 'ap-southeast-1';
                command['regExPattern'] = 'arn:aws:lambda:ap-southeast-1:123456789012:function:*';
                yield command['execute']();
                const output = command.context.stdout.toString();
                expect(output).toMatch(`"--functions-regex" isn't meant to be used with ARNs.\n`);
            }));
            test('instrument multiple functions interactively', () => __awaiter(void 0, void 0, void 0, function* () {
                const node14LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node14-x`;
                const node16LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node16-x`;
                const node12LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node12-x`;
                const extensionLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Extension`;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                        FunctionName: 'lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
                        FunctionName: 'lambda-hello-world-2',
                        Handler: 'index.handler',
                        Runtime: 'nodejs14.x',
                    },
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-3': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-3',
                        FunctionName: 'lambda-hello-world-3',
                        Handler: 'index.handler',
                        Runtime: 'nodejs16.x',
                    },
                }, {
                    [`${node14LibraryLayer}:1`]: {
                        LayerVersionArn: `${node14LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${node12LibraryLayer}:1`]: {
                        LayerVersionArn: `${node12LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${node16LibraryLayer}:1`]: {
                        LayerVersionArn: `${node16LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${extensionLayer}:1`]: {
                        LayerVersionArn: `${extensionLayer}:1`,
                        Version: 1,
                    },
                }));
                prompt_1.requestAWSCredentials.mockImplementation(() => {
                    process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = fixtures_1.mockAwsAccessKeyId;
                    process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = fixtures_1.mockAwsSecretAccessKey;
                    process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = 'sa-east-1';
                });
                prompt_1.requestDatadogEnvVars.mockImplementation(() => {
                    process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
                    process.env[constants_1.CI_API_KEY_ENV_VAR] = fixtures_1.mockDatadogApiKey;
                });
                prompt_1.requestFunctionSelection.mockImplementation(() => [
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
                ]);
                prompt_1.requestChangesConfirmation.mockImplementation(() => true);
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure Datadog settings.
Fetching Lambda functions, this might take a while.
${chalk_1.bold(chalk_1.yellow('[Warning]'))} The environment, service and version tags have not been configured. Learn more about Datadog unified service tagging: ${chalk_1.underline(chalk_1.blueBright('https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.'))}
${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.\n
${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world')}
\t${chalk_1.bold(chalk_1.yellow('[Warning]'))} At least one latest layer version is being used. Ensure to lock in versions for production applications using \`--layerVersion\` and \`--extensionVersion\`.
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2')}
\t${chalk_1.bold(chalk_1.yellow('[Warning]'))} At least one latest layer version is being used. Ensure to lock in versions for production applications using \`--layerVersion\` and \`--extensionVersion\`.\n
Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"02aeb762fff59ac0d5ad1536cd9633bd\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:1\\",
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Node12-x:1\\"
  ]
}
TagResource -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"02aeb762fff59ac0d5ad1536cd9633bd\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:1\\",
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Node14-x:1\\"
  ]
}
TagResource -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
${chalk_1.yellow('[!]')} Confirmation needed.
${chalk_1.yellow('[!]')} Instrumenting functions.
"
`);
            }));
            test('instrument multiple specified functions interactively', () => __awaiter(void 0, void 0, void 0, function* () {
                const node14LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node14-x`;
                const node16LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node16-x`;
                const node12LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node12-x`;
                const extensionLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Extension`;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                        FunctionName: 'lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
                        FunctionName: 'lambda-hello-world-2',
                        Handler: 'index.handler',
                        Runtime: 'nodejs14.x',
                    },
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-3': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-3',
                        FunctionName: 'lambda-hello-world-3',
                        Handler: 'index.handler',
                        Runtime: 'nodejs16.x',
                    },
                }, {
                    [`${node14LibraryLayer}:1`]: {
                        LayerVersionArn: `${node14LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${node12LibraryLayer}:1`]: {
                        LayerVersionArn: `${node12LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${node16LibraryLayer}:1`]: {
                        LayerVersionArn: `${node16LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${extensionLayer}:1`]: {
                        LayerVersionArn: `${extensionLayer}:1`,
                        Version: 1,
                    },
                }));
                prompt_1.requestAWSCredentials.mockImplementation(() => {
                    process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = fixtures_1.mockAwsAccessKeyId;
                    process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = fixtures_1.mockAwsSecretAccessKey;
                    process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = 'sa-east-1';
                    process.env[constants_1.AWS_SESSION_TOKEN_ENV_VAR] = 'some-session-token';
                });
                prompt_1.requestDatadogEnvVars.mockImplementation(() => {
                    process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
                    process.env[constants_1.CI_API_KEY_ENV_VAR] = fixtures_1.mockDatadogApiKey;
                });
                prompt_1.requestChangesConfirmation.mockImplementation(() => true);
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-i',
                    '-f',
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                    '-f',
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure Datadog settings.
${chalk_1.bold(chalk_1.yellow('[Warning]'))} The environment, service and version tags have not been configured. Learn more about Datadog unified service tagging: ${chalk_1.underline(chalk_1.blueBright('https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.'))}
${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.\n
${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world')}
\t${chalk_1.bold(chalk_1.yellow('[Warning]'))} At least one latest layer version is being used. Ensure to lock in versions for production applications using \`--layerVersion\` and \`--extensionVersion\`.
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2')}
\t${chalk_1.bold(chalk_1.yellow('[Warning]'))} At least one latest layer version is being used. Ensure to lock in versions for production applications using \`--layerVersion\` and \`--extensionVersion\`.\n
Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"02aeb762fff59ac0d5ad1536cd9633bd\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:1\\",
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Node12-x:1\\"
  ]
}
TagResource -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"02aeb762fff59ac0d5ad1536cd9633bd\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:1\\",
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Node14-x:1\\"
  ]
}
TagResource -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
${chalk_1.yellow('[!]')} Confirmation needed.
${chalk_1.yellow('[!]')} Instrumenting functions.
"
`);
            }));
            test('aborts if a problem occurs while setting the AWS credentials interactively', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                prompt_1.requestAWSCredentials.mockImplementation(() => Promise.reject('Unexpected error'));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
${chalk_1.red('[Error]')} Unexpected error
"
`);
            }));
            test('aborts if a problem occurs while setting the Datadog Environment Variables interactively', () => __awaiter(void 0, void 0, void 0, function* () {
                process.env = {
                    [constants_1.AWS_ACCESS_KEY_ID_ENV_VAR]: fixtures_1.mockAwsAccessKeyId,
                    [constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR]: fixtures_1.mockAwsSecretAccessKey,
                    [constants_1.AWS_DEFAULT_REGION_ENV_VAR]: 'sa,-east-1',
                };
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                prompt_1.requestDatadogEnvVars.mockImplementation(() => Promise.reject('Unexpected error'));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure Datadog settings.
${chalk_1.red('[Error]')} Unexpected error
"
`);
            }));
            test('when provided it sets DD_ENV, DD_SERVICE, and DD_VERSION environment variables in interactive mode', () => __awaiter(void 0, void 0, void 0, function* () {
                const node12LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node12-x`;
                const extensionLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Extension`;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                        FunctionName: 'lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                }, {
                    [`${node12LibraryLayer}:1`]: {
                        LayerVersionArn: `${node12LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${extensionLayer}:1`]: {
                        LayerVersionArn: `${extensionLayer}:1`,
                        Version: 1,
                    },
                }));
                prompt_1.requestAWSCredentials.mockImplementation(() => {
                    process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = fixtures_1.mockAwsAccessKeyId;
                    process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = fixtures_1.mockAwsSecretAccessKey;
                    process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = 'sa-east-1';
                });
                prompt_1.requestDatadogEnvVars.mockImplementation(() => {
                    process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
                    process.env[constants_1.CI_API_KEY_ENV_VAR] = fixtures_1.mockDatadogApiKey;
                });
                prompt_1.requestFunctionSelection.mockImplementation(() => [
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                ]);
                prompt_1.requestChangesConfirmation.mockImplementation(() => true);
                prompt_1.requestEnvServiceVersion.mockImplementation(() => {
                    process.env[constants_1.ENVIRONMENT_ENV_VAR] = fixtures_1.mockDatadogEnv;
                    process.env[constants_1.SERVICE_ENV_VAR] = fixtures_1.mockDatadogService;
                    process.env[constants_1.VERSION_ENV_VAR] = fixtures_1.mockDatadogVersion;
                });
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure Datadog settings.
Fetching Lambda functions, this might take a while.
${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.

${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world')}
\t${chalk_1.bold(chalk_1.yellow('[Warning]'))} At least one latest layer version is being used. Ensure to lock in versions for production applications using \`--layerVersion\` and \`--extensionVersion\`.

Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"02aeb762fff59ac0d5ad1536cd9633bd\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_ENV\\": \\"sandbox\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_SERVICE\\": \\"testServiceName\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_VERSION\\": \\"1.0.0\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:1\\",
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Node12-x:1\\"
  ]
}
TagResource -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
${chalk_1.yellow('[!]')} Confirmation needed.
${chalk_1.yellow('[!]')} Instrumenting functions.
"
`);
            }));
            test('when not provided it does not set DD_ENV, DD_SERVICE, and DD_VERSION tags in interactive mode', () => __awaiter(void 0, void 0, void 0, function* () {
                const node12LibraryLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Node12-x`;
                const extensionLayer = `arn:aws:lambda:sa-east-1:${constants_1.DEFAULT_LAYER_AWS_ACCOUNT}:layer:Datadog-Extension`;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                        FunctionName: 'lambda-hello-world',
                        Handler: 'index.handler',
                        Runtime: 'nodejs12.x',
                    },
                }, {
                    [`${node12LibraryLayer}:1`]: {
                        LayerVersionArn: `${node12LibraryLayer}:1`,
                        Version: 1,
                    },
                    [`${extensionLayer}:1`]: {
                        LayerVersionArn: `${extensionLayer}:1`,
                        Version: 1,
                    },
                }));
                prompt_1.requestAWSCredentials.mockImplementation(() => {
                    process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = fixtures_1.mockAwsAccessKeyId;
                    process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = fixtures_1.mockAwsSecretAccessKey;
                    process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = 'sa-east-1';
                });
                prompt_1.requestDatadogEnvVars.mockImplementation(() => {
                    process.env[constants_1.CI_SITE_ENV_VAR] = 'datadoghq.com';
                    process.env[constants_1.CI_API_KEY_ENV_VAR] = fixtures_1.mockDatadogApiKey;
                });
                prompt_1.requestFunctionSelection.mockImplementation(() => [
                    'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                ]);
                prompt_1.requestChangesConfirmation.mockImplementation(() => true);
                prompt_1.requestEnvServiceVersion.mockImplementation(() => {
                    process.env[constants_1.ENVIRONMENT_ENV_VAR] = undefined;
                    process.env[constants_1.SERVICE_ENV_VAR] = undefined;
                    process.env[constants_1.VERSION_ENV_VAR] = undefined;
                });
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(0);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
${chalk_1.bold(chalk_1.yellow('[!]'))} Configure Datadog settings.
Fetching Lambda functions, this might take a while.
${chalk_1.bold(chalk_1.yellow('[Warning]'))} The environment, service and version tags have not been configured. Learn more about Datadog unified service tagging: ${chalk_1.underline(chalk_1.blueBright('https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.'))}
${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.

${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world')}
\t${chalk_1.bold(chalk_1.yellow('[Warning]'))} At least one latest layer version is being used. Ensure to lock in versions for production applications using \`--layerVersion\` and \`--extensionVersion\`.

Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"/opt/nodejs/node_modules/datadog-lambda-js/handler.handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"DD_LAMBDA_HANDLER\\": \\"index.handler\\",
      \\"DD_API_KEY\\": \\"02aeb762fff59ac0d5ad1536cd9633bd\\",
      \\"DD_SITE\\": \\"datadoghq.com\\",
      \\"DD_CAPTURE_LAMBDA_PAYLOAD\\": \\"false\\",
      \\"DD_MERGE_XRAY_TRACES\\": \\"false\\",
      \\"DD_TRACE_ENABLED\\": \\"true\\",
      \\"DD_FLUSH_TO_LOG\\": \\"true\\"
    }
  },
  \\"Layers\\": [
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Extension:1\\",
    \\"arn:aws:lambda:sa-east-1:464622532012:layer:Datadog-Node12-x:1\\"
  ]
}
TagResource -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"dd_sls_ci\\": \\"v${version}\\"
}
${chalk_1.yellow('[!]')} Confirmation needed.
${chalk_1.yellow('[!]')} Instrumenting functions.
"
`);
            }));
            test('aborts if there are no functions to instrument in the user AWS account', () => __awaiter(void 0, void 0, void 0, function* () {
                process.env = {
                    [constants_1.AWS_ACCESS_KEY_ID_ENV_VAR]: fixtures_1.mockAwsAccessKeyId,
                    [constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR]: fixtures_1.mockAwsSecretAccessKey,
                    [constants_1.AWS_DEFAULT_REGION_ENV_VAR]: 'sa-east-1',
                    [constants_1.CI_SITE_ENV_VAR]: 'datadoghq.com',
                    [constants_1.CI_API_KEY_ENV_VAR]: fixtures_1.mockDatadogApiKey,
                };
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
Fetching Lambda functions, this might take a while.
${chalk_1.red('[Error]')} Couldn't find any Lambda functions in the specified region.
"
`);
            }));
            test('aborts early when the aws-sdk throws an error while instrumenting interactively', () => __awaiter(void 0, void 0, void 0, function* () {
                process.env = {
                    [constants_1.AWS_ACCESS_KEY_ID_ENV_VAR]: fixtures_1.mockAwsAccessKeyId,
                    [constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR]: fixtures_1.mockAwsSecretAccessKey,
                    [constants_1.AWS_DEFAULT_REGION_ENV_VAR]: 'sa-east-1',
                    [constants_1.CI_SITE_ENV_VAR]: 'datadoghq.com',
                    [constants_1.CI_API_KEY_ENV_VAR]: fixtures_1.mockDatadogApiKey,
                };
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => ({
                    listFunctions: jest.fn().mockImplementation(() => ({ promise: () => Promise.reject('ListFunctionsError') })),
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const code = yield cli.run(['lambda', 'instrument', '-i'], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} Configure AWS region.
Fetching Lambda functions, this might take a while.
${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Max retry count exceeded. ListFunctionsError
"
`);
            }));
            test('aborts early when a layer version is set for Java', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Runtime: 'java8.al2',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '-v',
                    '6',
                    '--extra-tags',
                    'layer:api,team:intake',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Only the --extension-version argument should be set for the java8.al2 runtime. Please remove the --layer-version argument from the instrument command.
"
`);
            }));
            test('aborts early when a layer version is set for Ruby', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Runtime: 'ruby2.7',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '-v',
                    '40',
                    '--extra-tags',
                    'layer:api,team:intake',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Only the --extension-version argument should be set for the ruby2.7 runtime. Please remove the --layer-version argument from the instrument command.
"
`);
            }));
            test('aborts early when a layer version is set for a Custom runtime', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Runtime: 'provided.al2',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '-v',
                    '6',
                    '--extra-tags',
                    'layer:api,team:intake',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Only the --extension-version argument should be set for the provided.al2 runtime. Please remove the --layer-version argument from the instrument command.
"
`);
            }));
            test('aborts early when .NET is using ARM64 architecture', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
                aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                    'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world': {
                        Architectures: ['arm64'],
                        FunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world',
                        Runtime: 'dotnetcore3.1',
                    },
                }));
                const cli = fixtures_1.makeCli();
                const context = fixtures_1.createMockContext();
                const functionARN = 'arn:aws:lambda:us-east-1:123456789012:function:lambda-hello-world';
                process.env.DATADOG_API_KEY = '1234';
                const code = yield cli.run([
                    'lambda',
                    'instrument',
                    '-f',
                    functionARN,
                    '--dry',
                    '-v',
                    '6',
                    '--extra-tags',
                    'layer:api,team:intake',
                    '--service',
                    'middletier',
                    '--env',
                    'staging',
                    '--version',
                    '0.2',
                ], context);
                const output = context.stdout.toString();
                expect(code).toBe(1);
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Instrumenting arm64 architecture is not currently supported for .NET. Please only instrument .NET functions using x86_64 architecture.
"
`);
            }));
        });
        describe('getSettings', () => {
            test('uses config file settings', () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['flushMetricsToLogs'] = 'false';
                command['config']['forwarder'] = 'my-forwarder';
                command['config']['layerVersion'] = '2';
                command['config']['extensionVersion'] = '6';
                command['config']['layerAWSAccount'] = 'another-account';
                command['config']['mergeXrayTraces'] = 'false';
                command['config']['tracing'] = 'false';
                command['config']['logLevel'] = 'debug';
                expect(command['getSettings']()).toEqual({
                    captureLambdaPayload: false,
                    environment: undefined,
                    extensionVersion: 6,
                    extraTags: undefined,
                    flushMetricsToLogs: false,
                    forwarderARN: 'my-forwarder',
                    interactive: false,
                    layerAWSAccount: 'another-account',
                    layerVersion: 2,
                    logLevel: 'debug',
                    mergeXrayTraces: false,
                    service: undefined,
                    tracingEnabled: false,
                    version: undefined,
                });
            });
            test('prefers command line arguments over config file', () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['forwarder'] = 'my-forwarder';
                command['config']['forwarder'] = 'another-forwarder';
                command['layerVersion'] = '1';
                command['config']['layerVersion'] = '2';
                command['layerAWSAccount'] = 'my-account';
                command['config']['layerAWSAccount'] = 'another-account';
                command['mergeXrayTraces'] = 'true';
                command['config']['mergeXrayTraces'] = 'false';
                command['flushMetricsToLogs'] = 'false';
                command['config']['flushMetricsToLogs'] = 'true';
                command['tracing'] = 'true';
                command['config']['tracing'] = 'false';
                command['logLevel'] = 'debug';
                command['config']['logLevel'] = 'info';
                expect(command['getSettings']()).toEqual({
                    captureLambdaPayload: false,
                    flushMetricsToLogs: false,
                    forwarderARN: 'my-forwarder',
                    interactive: false,
                    layerAWSAccount: 'my-account',
                    layerVersion: 1,
                    logLevel: 'debug',
                    mergeXrayTraces: true,
                    tracingEnabled: true,
                });
            });
            test("returns undefined when layer version can't be parsed", () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command.context = {
                    stdout: { write: jest.fn() },
                };
                command['layerVersion'] = 'abd';
                expect(command['getSettings']()).toBeUndefined();
            });
            test("returns undefined when extension version can't be parsed", () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command.context = {
                    stdout: { write: jest.fn() },
                };
                command['extensionVersion'] = 'abd';
                expect(command['getSettings']()).toBeUndefined();
            });
            test('converts string boolean from command line and config file correctly', () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                const validSettings = {
                    captureLambdaPayload: true,
                    extensionVersion: undefined,
                    flushMetricsToLogs: false,
                    forwarderARN: undefined,
                    interactive: false,
                    layerAWSAccount: undefined,
                    layerVersion: undefined,
                    logLevel: undefined,
                    mergeXrayTraces: false,
                    tracingEnabled: true,
                };
                command['config']['captureLambdaPayload'] = 'truE';
                command['config']['flushMetricsToLogs'] = 'False';
                command['config']['mergeXrayTraces'] = 'falSE';
                command['config']['tracing'] = 'TRUE';
                expect(command['getSettings']()).toEqual(validSettings);
                command['config']['captureLambdaPayload'] = 'true';
                command['config']['flushMetricsToLogs'] = 'false';
                command['config']['mergeXrayTraces'] = 'false';
                command['config']['tracing'] = 'true';
                expect(command['getSettings']()).toEqual(validSettings);
                validSettings.captureLambdaPayload = false;
                validSettings.flushMetricsToLogs = true;
                validSettings.mergeXrayTraces = true;
                validSettings.tracingEnabled = false;
                command['captureLambdaPayload'] = 'faLSE';
                command['flushMetricsToLogs'] = 'truE';
                command['mergeXrayTraces'] = 'TRUe';
                command['tracing'] = 'FALSE';
                expect(command['getSettings']()).toEqual(validSettings);
                command['captureLambdaPayload'] = 'false';
                command['flushMetricsToLogs'] = 'true';
                command['mergeXrayTraces'] = 'true';
                command['tracing'] = 'false';
                expect(command['getSettings']()).toEqual(validSettings);
            });
            test('aborts early if converting string boolean has an invalid value', () => {
                process.env = {};
                const stringBooleans = [
                    'flushMetricsToLogs',
                    'mergeXrayTraces',
                    'tracing',
                ];
                for (const option of stringBooleans) {
                    let command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                    command['config'][option] = 'NotBoolean';
                    command['getSettings']();
                    let output = command.context.stdout.toString();
                    expect(output).toMatch(`Invalid boolean specified for ${option}.\n`);
                    command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                    command[option] = 'NotBoolean';
                    command['getSettings']();
                    output = command.context.stdout.toString();
                    expect(output).toMatch(`Invalid boolean specified for ${option}.\n`);
                }
            });
            test('warns if any of environment, service or version tags are not set', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                let command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['region'] = 'ap-southeast-1';
                command['config']['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
                yield command['getSettings']();
                let output = command.context.stdout.toString();
                expect(output).toMatch(`${chalk_1.bold(chalk_1.yellow('[Warning]'))} The environment, service and version tags have not been configured. Learn more about Datadog unified service tagging: ${chalk_1.underline(chalk_1.blueBright('https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.'))}\n`);
                command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['region'] = 'ap-southeast-1';
                command['config']['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
                command['config']['environment'] = 'b';
                command['config']['service'] = 'middletier';
                yield command['getSettings']();
                output = command.context.stdout.toString();
                expect(output).toMatch(`${chalk_1.bold(chalk_1.yellow('[Warning]'))} The version tag has not been configured. Learn more about Datadog unified service tagging: ${chalk_1.underline(chalk_1.blueBright('https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.'))}\n`);
            }));
            test('aborts early if extraTags do not comply with expected key:value list', () => __awaiter(void 0, void 0, void 0, function* () {
                ;
                fs.readFile.mockImplementation((a, b, callback) => callback({}));
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['config']['region'] = 'ap-southeast-1';
                command['config']['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
                command['config']['service'] = 'middletier';
                command['config']['environment'] = 'staging';
                command['config']['version'] = '0.2';
                command['config']['extraTags'] = 'not-complying:illegal-chars-in-key,complies:valid-pair';
                yield command['getSettings']();
                const output = command.context.stdout.toString();
                expect(output).toMatch('Extra tags do not comply with the <key>:<value> array.\n');
            }));
        });
        describe('printPlannedActions', () => {
            test('prints no output when list is empty', () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['printPlannedActions']([]);
                const output = command.context.stdout.toString();
                expect(output).toMatchInlineSnapshot(`
                                        "
                                        No updates will be applied
                                        "
                                `);
            });
            test('prints log group actions', () => {
                process.env = {};
                const command = fixtures_1.createCommand(instrument_1.InstrumentCommand);
                command['printPlannedActions']([
                    {
                        functionARN: 'my-func',
                        lambdaConfig: {},
                        logGroupConfiguration: {
                            createLogGroupRequest: { logGroupName: 'my-log-group' },
                            deleteSubscriptionFilterRequest: { filterName: 'my-filter' },
                            logGroupName: 'my-log-group',
                            subscriptionFilterRequest: { filterName: 'my-filter' },
                        },
                    },
                ]);
                const output = command.context.stdout.toString();
                expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[Warning]'))} Instrument your ${chalk_1.hex('#FF9900').bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.bold('uninstrument')}\` with the same arguments to revert the changes.
\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('my-func')}\n
Will apply the following updates:
CreateLogGroup -> my-log-group
{
  \\"logGroupName\\": \\"my-log-group\\"
}
DeleteSubscriptionFilter -> my-log-group
{
  \\"filterName\\": \\"my-filter\\"
}
PutSubscriptionFilter -> my-log-group
{
  \\"filterName\\": \\"my-filter\\"
}
"
`);
            });
        });
    });
});
//# sourceMappingURL=instrument.test.js.map