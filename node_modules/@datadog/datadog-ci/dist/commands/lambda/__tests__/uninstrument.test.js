"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-string-literal
jest.mock('fs');
jest.mock('aws-sdk');
jest.mock('../prompt');
const aws_sdk_1 = require("aws-sdk");
const chalk_1 = require("chalk");
const fs = __importStar(require("fs"));
const constants_1 = require("../constants");
const prompt_1 = require("../prompt");
const uninstrument_1 = require("../uninstrument");
const fixtures_1 = require("./fixtures");
describe('uninstrument', () => {
    describe('execute', () => {
        const OLD_ENV = process.env;
        beforeEach(() => {
            jest.resetModules();
            process.env = {};
        });
        afterAll(() => {
            process.env = OLD_ENV;
        });
        test('prints dry run data for a valid uninstrumentation', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:uninstrument': {
                    Architectures: ['x86_64'],
                    Environment: {
                        Variables: {
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'true',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'lambda_function.lambda_handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'true',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                            USER_VARIABLE: 'shouldnt be deleted by uninstrumentation',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:uninstrument',
                    Handler: 'datadog_lambda.handler.handler',
                    Layers: [
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Extension:11',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Python38:49',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                    ],
                    Runtime: 'python3.8',
                },
            }));
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const functionARN = 'arn:aws:lambda:us-east-1:000000000000:function:uninstrument';
            process.env.DATADOG_API_KEY = '1234';
            const code = yield cli.run(['lambda', 'uninstrument', '-f', functionARN, '-r', 'us-east-1', '-d'], context);
            const output = context.stdout.toString();
            expect(code).toBe(0);
            expect(output).toMatchInlineSnapshot(`
"\n${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:us-east-1:000000000000:function:uninstrument')}\n
${chalk_1.bold(chalk_1.cyan('[Dry Run] '))}Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:us-east-1:000000000000:function:uninstrument
{
  \\"FunctionName\\": \\"arn:aws:lambda:us-east-1:000000000000:function:uninstrument\\",
  \\"Handler\\": \\"lambda_function.lambda_handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"USER_VARIABLE\\": \\"shouldnt be deleted by uninstrumentation\\"
    }
  },
  \\"Layers\\": []
}
"
`);
        }));
        test('runs function update command for valid uninstrumentation', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            const lambda = fixtures_1.makeMockLambda({
                'arn:aws:lambda:us-east-1:000000000000:function:uninstrument': {
                    Environment: {
                        Variables: {
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'true',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'lambda_function.lambda_handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'true',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                            USER_VARIABLE: 'shouldnt be deleted by uninstrumentation',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:us-east-1:000000000000:function:uninstrument',
                    Handler: 'datadog_lambda.handler.handler',
                    Layers: [
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Extension:11',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Python38:49',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                    ],
                    Runtime: 'python3.8',
                },
            });
            aws_sdk_1.Lambda.mockImplementation(() => lambda);
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const functionARN = 'arn:aws:lambda:us-east-1:000000000000:function:uninstrument';
            process.env.DATADOG_API_KEY = '1234';
            yield cli.run(['lambda', 'uninstrument', '-f', functionARN, '-r', 'us-east-1'], context);
            expect(lambda.updateFunctionConfiguration).toHaveBeenCalled();
        }));
        test('aborts early when the aws-sdk throws an error', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => ({
                getFunction: jest.fn().mockImplementation(() => ({ promise: () => Promise.reject('Lambda failed') })),
            }));
            process.env = {};
            const command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['functions'] = ['my-func'];
            command['region'] = 'us-east-1';
            const code = yield command['execute']();
            const output = command.context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatch(`${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Lambda failed\n`);
        }));
        test("aborts early when function regions can't be found", () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run(['lambda', 'uninstrument', '--function', 'my-func'], context);
            const output = context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatch('No default region specified for ["my-func"]. Use -r, --region, or use a full functionARN');
        }));
        test('aborts early when no functions are specified', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run(['lambda', 'uninstrument'], context);
            const output = context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatchInlineSnapshot(`
        "${chalk_1.red('[Error]')} No functions specified for un-instrumentation.
        "
      `);
        }));
        test('aborts early when no functions are specified while using config file', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({}));
            process.env = {};
            const command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['config']['region'] = 'ap-southeast-1';
            yield command['execute']();
            const output = command.context.stdout.toString();
            expect(output).toMatchInlineSnapshot(`
        "${chalk_1.red('[Error]')} No functions specified for un-instrumentation.
        "
      `);
        }));
        test('aborts if functions and a pattern are set at the same time', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({}));
            process.env = {};
            let command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['config']['region'] = 'ap-southeast-1';
            command['config']['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
            command['regExPattern'] = 'valid-pattern';
            yield command['execute']();
            let output = command.context.stdout.toString();
            expect(output).toMatch('Functions in config file and "--functions-regex" should not be used at the same time.\n');
            command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['region'] = 'ap-southeast-1';
            command['functions'] = ['arn:aws:lambda:ap-southeast-1:123456789012:function:lambda-hello-world'];
            command['regExPattern'] = 'valid-pattern';
            yield command['execute']();
            output = command.context.stdout.toString();
            expect(output).toMatch('"--functions" and "--functions-regex" should not be used at the same time.\n');
        }));
        test('aborts if the regEx pattern is an ARN', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({}));
            process.env = {};
            const command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['region'] = 'ap-southeast-1';
            command['regExPattern'] = 'arn:aws:lambda:ap-southeast-1:123456789012:function:*';
            const code = yield command['execute']();
            const output = command.context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatch(`"--functions-regex" isn't meant to be used with ARNs.\n`);
        }));
        test('aborts if the regEx pattern is set but no region is specified', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({}));
            process.env = {};
            const command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['regExPattern'] = 'my-function';
            const code = yield command['execute']();
            const output = command.context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatch('No default region specified. Use `-r`, `--region`.');
        }));
        test('aborts if the the aws-sdk fails', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({}));
            aws_sdk_1.Lambda.mockImplementation(() => ({
                listFunctions: jest.fn().mockImplementation(() => ({ promise: () => Promise.reject('ListFunctionsError') })),
            }));
            process.env = {};
            aws_sdk_1.Lambda.mockImplementation(() => ({
                listFunctions: jest.fn().mockImplementation(() => ({ promise: () => Promise.reject('ListFunctionsError') })),
            }));
            const command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['region'] = 'ap-southeast-1';
            command['regExPattern'] = 'my-function';
            const code = yield command['execute']();
            const output = command.context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatch(`Fetching Lambda functions, this might take a while.\n${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Max retry count exceeded. ListFunctionsError\n`);
        }));
        test('uninstrument multiple functions interactively', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world': {
                    Architectures: ['x86_64'],
                    Environment: {
                        Variables: {
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'true',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'lambda_function.lambda_handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'true',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                            USER_VARIABLE: 'shouldnt be deleted by uninstrumentation',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                    FunctionName: 'lambda-hello-world',
                    Handler: 'datadog_lambda.handler.handler',
                    Layers: [
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Extension:11',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Python38:49',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                    ],
                    Runtime: 'python3.8',
                },
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2': {
                    Architectures: ['x86_64'],
                    Environment: {
                        Variables: {
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'true',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'lambda_function.lambda_handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'true',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
                    FunctionName: 'lambda-hello-world-2',
                    Handler: 'datadog_lambda.handler.handler',
                    Layers: [
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Extension:11',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Python39:49',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                    ],
                    Runtime: 'python3.9',
                },
            }));
            prompt_1.requestAWSCredentials.mockImplementation(() => {
                process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = fixtures_1.mockAwsAccessKeyId;
                process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = fixtures_1.mockAwsSecretAccessKey;
                process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = 'sa-east-1';
            });
            prompt_1.requestFunctionSelection.mockImplementation(() => [
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
            ]);
            prompt_1.requestChangesConfirmation.mockImplementation(() => true);
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run(['lambda', 'uninstrument', '-i'], context);
            const output = context.stdout.toString();
            expect(code).toBe(0);
            expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
Fetching Lambda functions, this might take a while.\n
${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world')}
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2')}\n
Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"lambda_function.lambda_handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"USER_VARIABLE\\": \\"shouldnt be deleted by uninstrumentation\\"
    }
  },
  \\"Layers\\": []
}
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2\\",
  \\"Handler\\": \\"lambda_function.lambda_handler\\",
  \\"Environment\\": {
    \\"Variables\\": {}
  },
  \\"Layers\\": []
}
${chalk_1.yellow('[!]')} Confirmation needed.
${chalk_1.yellow('[!]')} Uninstrumenting functions.
"
`);
        }));
        test('uninstrument multiple specified functions interactively', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world': {
                    Architectures: ['x86_64'],
                    Environment: {
                        Variables: {
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'true',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'lambda_function.lambda_handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'true',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                            USER_VARIABLE: 'shouldnt be deleted by uninstrumentation',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                    FunctionName: 'lambda-hello-world',
                    Handler: 'datadog_lambda.handler.handler',
                    Layers: [
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Extension:11',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Python38:49',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                    ],
                    Runtime: 'python3.8',
                },
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2': {
                    Architectures: ['x86_64'],
                    Environment: {
                        Variables: {
                            [constants_1.ENVIRONMENT_ENV_VAR]: 'staging',
                            [constants_1.FLUSH_TO_LOG_ENV_VAR]: 'true',
                            [constants_1.LAMBDA_HANDLER_ENV_VAR]: 'lambda_function.lambda_handler',
                            [constants_1.LOG_LEVEL_ENV_VAR]: 'debug',
                            [constants_1.MERGE_XRAY_TRACES_ENV_VAR]: 'false',
                            [constants_1.SERVICE_ENV_VAR]: 'middletier',
                            [constants_1.SITE_ENV_VAR]: 'datadoghq.com',
                            [constants_1.TRACE_ENABLED_ENV_VAR]: 'true',
                            [constants_1.VERSION_ENV_VAR]: '0.2',
                        },
                    },
                    FunctionArn: 'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
                    FunctionName: 'lambda-hello-world-2',
                    Handler: 'datadog_lambda.handler.handler',
                    Layers: [
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Extension:11',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                        {
                            Arn: 'arn:aws:lambda:sa-east-1:000000000000:layer:Datadog-Python39:49',
                            CodeSize: 0,
                            SigningJobArn: 'some-signing-job-arn',
                            SigningProfileVersionArn: 'some-signing-profile',
                        },
                    ],
                    Runtime: 'python3.9',
                },
            }));
            prompt_1.requestAWSCredentials.mockImplementation(() => {
                process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = fixtures_1.mockAwsAccessKeyId;
                process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = fixtures_1.mockAwsSecretAccessKey;
                process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = 'sa-east-1';
            });
            prompt_1.requestFunctionSelection.mockImplementation(() => [
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
            ]);
            prompt_1.requestChangesConfirmation.mockImplementation(() => true);
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run([
                'lambda',
                'uninstrument',
                '-i',
                '-f',
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world',
                '-f',
                'arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2',
            ], context);
            const output = context.stdout.toString();
            expect(code).toBe(0);
            expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.\n
${chalk_1.bold(chalk_1.yellow('[!]'))} Functions to be updated:
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world')}
\t- ${chalk_1.bold('arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2')}\n
Will apply the following updates:
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world\\",
  \\"Handler\\": \\"lambda_function.lambda_handler\\",
  \\"Environment\\": {
    \\"Variables\\": {
      \\"USER_VARIABLE\\": \\"shouldnt be deleted by uninstrumentation\\"
    }
  },
  \\"Layers\\": []
}
UpdateFunctionConfiguration -> arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2
{
  \\"FunctionName\\": \\"arn:aws:lambda:sa-east-1:123456789012:function:lambda-hello-world-2\\",
  \\"Handler\\": \\"lambda_function.lambda_handler\\",
  \\"Environment\\": {
    \\"Variables\\": {}
  },
  \\"Layers\\": []
}
${chalk_1.yellow('[!]')} Confirmation needed.
${chalk_1.yellow('[!]')} Uninstrumenting functions.
"
`);
        }));
        test('aborts if a problem occurs while setting the AWS credentials interactively', () => __awaiter(void 0, void 0, void 0, function* () {
            ;
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            prompt_1.requestAWSCredentials.mockImplementation(() => Promise.reject('Unexpected error'));
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run(['lambda', 'uninstrument', '-i'], context);
            const output = context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatchInlineSnapshot(`
"${chalk_1.bold(chalk_1.yellow('[!]'))} No AWS credentials found, let's set them up! Or you can re-run the command and supply the AWS credentials in the same way when you invoke the AWS CLI.
${chalk_1.red('[Error]')} Unexpected error
"
`);
        }));
        test('aborts if there are no functions to uninstrument in the user AWS account', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env = {
                [constants_1.AWS_ACCESS_KEY_ID_ENV_VAR]: fixtures_1.mockAwsAccessKeyId,
                [constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR]: fixtures_1.mockAwsSecretAccessKey,
                [constants_1.AWS_DEFAULT_REGION_ENV_VAR]: 'sa-east-1',
            };
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => fixtures_1.makeMockLambda({}));
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run(['lambda', 'uninstrument', '-i'], context);
            const output = context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatchInlineSnapshot(`
"Fetching Lambda functions, this might take a while.
${chalk_1.red('[Error]')} Couldn't find any Lambda functions in the specified region.
"
`);
        }));
        test('aborts early when the aws-sdk throws an error while uninstrumenting interactively', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env = {
                [constants_1.AWS_ACCESS_KEY_ID_ENV_VAR]: fixtures_1.mockAwsAccessKeyId,
                [constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR]: fixtures_1.mockAwsSecretAccessKey,
                [constants_1.AWS_DEFAULT_REGION_ENV_VAR]: 'sa-east-1',
            };
            fs.readFile.mockImplementation((a, b, callback) => callback({ code: 'ENOENT' }));
            aws_sdk_1.Lambda.mockImplementation(() => ({
                listFunctions: jest.fn().mockImplementation(() => ({ promise: () => Promise.reject('ListFunctionsError') })),
            }));
            const cli = fixtures_1.makeCli();
            const context = fixtures_1.createMockContext();
            const code = yield cli.run(['lambda', 'uninstrument', '-i'], context);
            const output = context.stdout.toString();
            expect(code).toBe(1);
            expect(output).toMatchInlineSnapshot(`
"Fetching Lambda functions, this might take a while.
${chalk_1.red('[Error]')} Couldn't fetch Lambda functions. Error: Max retry count exceeded. ListFunctionsError
"
`);
        }));
    });
    describe('printPlannedActions', () => {
        test('prints no output when list is empty', () => {
            process.env = {};
            const command = fixtures_1.createCommand(uninstrument_1.UninstrumentCommand);
            command['printPlannedActions']([]);
            const output = command.context.stdout.toString();
            expect(output).toMatchInlineSnapshot(`
       "No updates will be applied
       "
      `);
        });
    });
});
//# sourceMappingURL=uninstrument.test.js.map