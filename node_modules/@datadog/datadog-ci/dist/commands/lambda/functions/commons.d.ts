import { CloudWatchLogs, Lambda } from 'aws-sdk';
import { LayerKey } from '../constants';
import { FunctionConfiguration, InstrumentationSettings } from '../interfaces';
/**
 * Returns an array of merged layer ARNs if given a Full Layer ARN,
 * if not, it justs returns the layer ARNs provided.
 *
 * @param fullLayerARN a complete layer ARN.
 * @param partialLayerARN a partial layer ARN.
 * @param layerARNs an array of layer ARNs.
 * @returns an array of layer ARNs.
 */
export declare const addLayerArn: (fullLayerArn: string | undefined, previousLayerName: string, layerARNs: string[]) => string[];
/**
 * Returns a coerced boolean given string booleans or booleans in
 * an spread array. Every other value will be ignored.
 *
 * @param fallback default value if none of the provided `values` comply.
 * @param values an spread array of string booleans or booleans.
 * @returns a coerced boolean.
 */
export declare const coerceBoolean: (fallback: boolean, ...values: any[]) => boolean;
/**
 * Returns an array of functions grouped by its region, it
 * throws an error if there are functions without a region.
 *
 * @param functions an array of strings comprised by
 * Functions ARNs, Partial ARNs, or Function Names.
 * @param defaultRegion a fallback region
 * @returns an array of functions grouped by region
 */
export declare const collectFunctionsByRegion: (functions: string[], defaultRegion: string | undefined) => {
    [key: string]: string[];
};
/**
 * Given a layer runtime, return its latest version.
 *
 * @param runtime the runtime of the layer.
 * @param region the region where the layer is stored.
 * @returns the latest version of the layer to find.
 */
export declare const findLatestLayerVersion: (layer: LayerKey, region: string) => Promise<number>;
export declare const isMissingAWSCredentials: () => boolean;
export declare const isMissingDatadogSiteEnvVar: () => boolean;
export declare const isMissingAnyDatadogApiKeyEnvVar: () => boolean;
export declare const isMissingDatadogEnvVars: () => boolean;
export declare const getAllLambdaFunctionConfigs: (lambda: Lambda) => Promise<Lambda.FunctionConfiguration[]>;
export declare const checkRuntimeTypesAreUniform: (configList: FunctionConfiguration[]) => boolean;
/**
 * Given a Lambda instance and a regular expression,
 * returns all the Function Configurations that match.
 *
 * @param lambda an instance of Lambda from aws-sdk.
 * @param pattern a regular expression
 * @returns an array of Lambda FunctionConfiguration's that match the pattern above.
 */
export declare const getLambdaFunctionConfigsFromRegex: (lambda: Lambda, pattern: string) => Promise<Lambda.FunctionConfiguration[]>;
/**
 * Given a Lambda instance and an array of Lambda names,
 * return all the Lambda Function Configurations.
 *
 * @param lambda an instance of Lambda from aws-sdk.
 * @param functionARNs an array of strings comprised by
 * Functions ARNs, Partial ARNs, or Function Names.
 * @returns an array of Lambda FunctionConfiguration's.
 */
export declare const getLambdaFunctionConfigs: (lambda: Lambda, functionARNs: string[]) => Promise<Lambda.FunctionConfiguration[]>;
/**
 * Returns the correct ARN of a **Specific Runtime Layer** given its configuration, region,
 * and settings (optional).
 *
 * @param config a Lambda FunctionConfiguration.
 * @param region a region where the layer is hosted.
 * @param settings instrumentation settings, mainly used to change the AWS account that contains the Layer.
 * @returns the ARN of a **Specific Runtime Layer** with the correct region, account, architecture, and name.
 */
export declare const getLayerArn: (config: Lambda.FunctionConfiguration, layer: LayerKey, region: string, settings?: InstrumentationSettings | undefined) => string;
export declare const getLayerNameWithVersion: (layerArn: string) => string | undefined;
export declare const getLayers: (config: Lambda.FunctionConfiguration) => string[];
/**
 * Call the aws-sdk Lambda api to get a Function given
 * an ARN and then return its Configuration.
 *
 * @param lambda an instance of Lambda from aws-sdk.
 * @param functionARN a string, can be Function ARN, Partial ARN, or a Function Name.
 * @returns the Lambda FunctionConfiguration of the given ARN.
 */
export declare const getLambdaFunctionConfig: (lambda: Lambda, functionARN: string) => Promise<Lambda.FunctionConfiguration>;
/**
 * Given a Function ARN, return its region by splitting the string,
 * can return undefined if it is doesn't exist.
 *
 * @param functionARN a string, can be Function ARN, Partial ARN, or a Function Name.
 * @returns the region of an ARN.
 */
export declare const getRegion: (functionARN: string) => string | undefined;
/**
 * Returns whether a Lambda Function is active or throws an error if
 * the FunctionConfiguration does not comply with `Successful` or `Active`.
 *
 * @param lambda an instance of Lambda from aws-sdk.
 * @param config a Lambda FunctionConfiguration.
 * @param functionArn a string, can be Function ARN, Partial ARN, or a Function Name.
 * @param attempts the number of attemps that have passed since the last retry.
 * @returns if a Lambda Function is active.
 */
export declare const isLambdaActive: (lambda: Lambda, config: Lambda.FunctionConfiguration, functionArn: string, attempts?: number) => Promise<boolean>;
/**
 * Returns whether the runtime given is supported by the Datadog CI Lambda.
 *
 * @param runtime a string representing a Lambda FunctionConfiguration Runtime.
 * @returns if a runtime is supported.
 */
export declare const isSupportedRuntime: (runtime?: string | undefined) => runtime is "nodejs12.x" | "nodejs14.x" | "java8.al2" | "java11" | "python3.6" | "python3.7" | "python3.8" | "python3.9" | "dotnetcore3.1" | "ruby2.5" | "ruby2.7" | "provided.al2" | "nodejs16.x";
export declare const isLayerRuntime: (runtime: string) => runtime is "nodejs12.x" | "nodejs14.x" | "python3.6" | "python3.7" | "python3.8" | "python3.9" | "dotnetcore3.1" | "extension" | "nodejs16.x";
export declare const sentenceMatchesRegEx: (sentence: string, regex: RegExp) => RegExpMatchArray | null;
export declare const updateLambdaFunctionConfigs: (lambda: Lambda, cloudWatch: CloudWatchLogs, configs: FunctionConfiguration[]) => Promise<void>;
export declare const willUpdateFunctionConfigs: (configs: FunctionConfiguration[]) => boolean;
