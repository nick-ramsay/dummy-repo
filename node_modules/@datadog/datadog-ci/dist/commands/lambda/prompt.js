"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestFunctionSelection = exports.requestChangesConfirmation = exports.requestEnvServiceVersion = exports.requestDatadogEnvVars = exports.requestAWSRegion = exports.requestAWSCredentials = exports.functionSelectionQuestion = exports.confirmationQuestion = exports.datadogEnvVarsQuestions = exports.datadogApiKeyTypeQuestion = void 0;
const chalk_1 = require("chalk");
const inquirer_1 = __importDefault(require("inquirer"));
const constants_1 = require("./constants");
const commons_1 = require("./functions/commons");
/* tslint:disable-next-line */
const checkboxPlusPrompt = require('inquirer-checkbox-plus-prompt');
inquirer_1.default.registerPrompt('checkbox-plus', checkboxPlusPrompt);
const fuzzy_1 = require("fuzzy");
const awsCredentialsQuestions = [
    {
        // AWS_ACCESS_KEY_ID question
        message: 'Enter AWS Access Key ID:',
        name: constants_1.AWS_ACCESS_KEY_ID_ENV_VAR,
        type: 'input',
        validate: (value) => {
            if (!value || !commons_1.sentenceMatchesRegEx(value, constants_1.AWS_ACCESS_KEY_ID_REG_EXP)) {
                return 'Enter a valid AWS Access Key ID.';
            }
            return true;
        },
    },
    {
        // AWS_SECRET_ACCESS_KEY_ENV_VAR question
        mask: true,
        message: 'Enter AWS Secret Access Key:',
        name: constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR,
        type: 'password',
        validate: (value) => {
            if (!value || !commons_1.sentenceMatchesRegEx(value, constants_1.AWS_SECRET_ACCESS_KEY_REG_EXP)) {
                return 'Enter a valid AWS Secret Access Key.';
            }
            return true;
        },
    },
    {
        // AWS_SESSION_TOKEN
        mask: true,
        message: 'Enter AWS Session Token (optional):',
        name: constants_1.AWS_SESSION_TOKEN_ENV_VAR,
        type: 'password',
    },
];
const awsRegionQuestion = (defaultRegion) => ({
    default: defaultRegion,
    message: 'Which AWS region (e.g., us-east-1) your Lambda functions are deployed?',
    name: constants_1.AWS_DEFAULT_REGION_ENV_VAR,
    type: 'input',
});
const datadogApiKeyTypeQuestion = (datadogSite) => ({
    choices: [
        {
            name: `Plain text ${chalk_1.bold('API Key')} (Recommended for trial users) `,
            value: {
                envVar: constants_1.CI_API_KEY_ENV_VAR,
                message: 'API Key:',
            },
        },
        new inquirer_1.default.Separator(),
        {
            name: `API key encrypted with AWS Key Management Service ${chalk_1.bold('(KMS) API Key')}`,
            value: {
                envVar: constants_1.CI_KMS_API_KEY_ENV_VAR,
                message: 'KMS Encrypted API Key:',
            },
        },
        {
            name: `AWS Secrets Manager ${chalk_1.bold('API Key Secret ARN')}`,
            value: {
                envVar: constants_1.CI_API_KEY_SECRET_ARN_ENV_VAR,
                message: 'API Key Secret ARN:',
            },
        },
    ],
    message: `Which type of Datadog API Key you want to set? \nLearn more at ${chalk_1.blueBright(`https://app.${datadogSite}/organization-settings/api-keys`)}`,
    name: 'type',
    type: 'list',
});
exports.datadogApiKeyTypeQuestion = datadogApiKeyTypeQuestion;
const datadogSiteQuestion = {
    // DATADOG SITE
    choices: constants_1.SITES,
    message: `Select the Datadog site to send data. \nLearn more at ${chalk_1.blueBright('https://docs.datadoghq.com/getting_started/site/')}`,
    name: constants_1.CI_SITE_ENV_VAR,
    type: 'list',
};
const envQuestion = {
    default: undefined,
    message: 'Enter a value for the environment variable DD_ENV',
    name: constants_1.ENVIRONMENT_ENV_VAR,
    type: 'input',
};
const serviceQuestion = {
    default: undefined,
    message: 'Enter a value for the environment variable DD_SERVICE',
    name: constants_1.SERVICE_ENV_VAR,
    type: 'input',
};
const versionQuestion = {
    default: undefined,
    message: 'Enter a value for the environment variable DD_VERISON',
    name: constants_1.VERSION_ENV_VAR,
    type: 'input',
};
const datadogEnvVarsQuestions = (datadogApiKeyType) => ({
    // DATADOG API KEY given type
    default: process.env[datadogApiKeyType.envVar],
    message: datadogApiKeyType.message,
    name: datadogApiKeyType.envVar,
    type: 'input',
    validate: (value) => {
        if (!value || !commons_1.sentenceMatchesRegEx(value, constants_1.DATADOG_API_KEY_REG_EXP)) {
            return 'Enter a valid Datadog API Key.';
        }
        return true;
    },
});
exports.datadogEnvVarsQuestions = datadogEnvVarsQuestions;
const confirmationQuestion = (message) => ({
    message,
    name: 'confirmation',
    type: 'confirm',
});
exports.confirmationQuestion = confirmationQuestion;
const functionSelectionQuestion = (functionNames) => ({
    choices: functionNames,
    highlight: true,
    message: 'Select the functions to modify (Press <space> to select, p.s. start typing the name instead of manually scrolling)',
    name: 'functions',
    pageSize: 10,
    searchable: true,
    source: (answersSoFar, input) => {
        input = input || '';
        return new Promise((resolve) => {
            const fuzzyResult = fuzzy_1.filter(input, functionNames);
            const data = fuzzyResult.map((element) => element.original);
            resolve(data);
        });
    },
    type: 'checkbox-plus',
    validate: (selectedFunctions) => {
        if (selectedFunctions.length < 1) {
            return 'You must choose at least one function.';
        }
        return true;
    },
});
exports.functionSelectionQuestion = functionSelectionQuestion;
const requestAWSCredentials = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const awsCredentialsAnswers = yield inquirer_1.default.prompt(awsCredentialsQuestions);
        process.env[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR] = awsCredentialsAnswers[constants_1.AWS_ACCESS_KEY_ID_ENV_VAR];
        process.env[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR] = awsCredentialsAnswers[constants_1.AWS_SECRET_ACCESS_KEY_ENV_VAR];
        if (awsCredentialsAnswers[constants_1.AWS_SESSION_TOKEN_ENV_VAR] !== undefined) {
            process.env[constants_1.AWS_SESSION_TOKEN_ENV_VAR] = awsCredentialsAnswers[constants_1.AWS_SESSION_TOKEN_ENV_VAR];
        }
    }
    catch (e) {
        if (e instanceof Error) {
            throw Error(`Couldn't set AWS Credentials. ${e.message}`);
        }
    }
});
exports.requestAWSCredentials = requestAWSCredentials;
const requestAWSRegion = (defaultRegion) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const awsRegionAnswer = yield inquirer_1.default.prompt(awsRegionQuestion(defaultRegion));
        process.env[constants_1.AWS_DEFAULT_REGION_ENV_VAR] = awsRegionAnswer[constants_1.AWS_DEFAULT_REGION_ENV_VAR];
    }
    catch (e) {
        if (e instanceof Error) {
            throw Error(`Couldn't set AWS region. ${e.message}`);
        }
    }
});
exports.requestAWSRegion = requestAWSRegion;
const requestDatadogEnvVars = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const datadogSiteAnswer = yield inquirer_1.default.prompt(datadogSiteQuestion);
        const selectedDatadogSite = datadogSiteAnswer[constants_1.CI_SITE_ENV_VAR];
        process.env[constants_1.CI_SITE_ENV_VAR] = selectedDatadogSite;
        const datadogApiKeyTypeAnswer = yield inquirer_1.default.prompt(exports.datadogApiKeyTypeQuestion(selectedDatadogSite));
        const datadogApiKeyType = datadogApiKeyTypeAnswer.type;
        const datadogEnvVars = yield inquirer_1.default.prompt(exports.datadogEnvVarsQuestions(datadogApiKeyType));
        const selectedDatadogApiKeyEnvVar = datadogApiKeyType.envVar;
        process.env[selectedDatadogApiKeyEnvVar] = datadogEnvVars[selectedDatadogApiKeyEnvVar];
    }
    catch (e) {
        if (e instanceof Error) {
            throw Error(`Couldn't set Datadog Environment Variables. ${e.message}`);
        }
    }
});
exports.requestDatadogEnvVars = requestDatadogEnvVars;
const requestEnvServiceVersion = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const envQuestionAnswer = yield inquirer_1.default.prompt(envQuestion);
        const inputedEnvQuestionAnswer = envQuestionAnswer[constants_1.ENVIRONMENT_ENV_VAR];
        process.env[constants_1.ENVIRONMENT_ENV_VAR] = inputedEnvQuestionAnswer;
        const serviceQuestionAnswer = yield inquirer_1.default.prompt(serviceQuestion);
        const inputedServiceQuestionAnswer = serviceQuestionAnswer[constants_1.SERVICE_ENV_VAR];
        process.env[constants_1.SERVICE_ENV_VAR] = inputedServiceQuestionAnswer;
        const versionQuestionAnswer = yield inquirer_1.default.prompt(versionQuestion);
        const inputedVersionQuestionAnswer = versionQuestionAnswer[constants_1.VERSION_ENV_VAR];
        process.env[constants_1.VERSION_ENV_VAR] = inputedVersionQuestionAnswer;
    }
    catch (e) {
        if (e instanceof Error) {
            throw Error(`Couldn't set user defined env, service, and version environment variables. ${e.message}`);
        }
    }
});
exports.requestEnvServiceVersion = requestEnvServiceVersion;
const requestChangesConfirmation = (message) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const confirmationAnswer = yield inquirer_1.default.prompt(exports.confirmationQuestion(message));
        return confirmationAnswer.confirmation;
    }
    catch (e) {
        if (e instanceof Error) {
            throw Error(`Couldn't receive confirmation. ${e.message}`);
        }
    }
});
exports.requestChangesConfirmation = requestChangesConfirmation;
const requestFunctionSelection = (functionNames) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const selectedFunctionsAnswer = yield inquirer_1.default.prompt(exports.functionSelectionQuestion(functionNames));
        return selectedFunctionsAnswer.functions;
    }
    catch (e) {
        if (e instanceof Error) {
            throw Error(`Couldn't receive selected functions. ${e.message}`);
        }
    }
});
exports.requestFunctionSelection = requestFunctionSelection;
//# sourceMappingURL=prompt.js.map