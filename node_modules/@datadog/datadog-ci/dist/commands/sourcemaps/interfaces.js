"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sourcemap = void 0;
const fs_1 = __importDefault(require("fs"));
class Sourcemap {
    constructor(minifiedFilePath, minifiedUrl, sourcemapPath) {
        this.minifiedFilePath = minifiedFilePath;
        this.minifiedUrl = minifiedUrl;
        this.sourcemapPath = sourcemapPath;
    }
    addRepositoryData(gitData) {
        this.gitData = gitData;
    }
    asMultipartPayload(cliVersion, service, version, projectPath) {
        const content = new Map([
            ['cli_version', { value: cliVersion }],
            ['service', { value: service }],
            ['version', { value: version }],
            ['source_map', { value: fs_1.default.createReadStream(this.sourcemapPath) }],
            ['minified_file', { value: fs_1.default.createReadStream(this.minifiedFilePath) }],
            ['minified_url', { value: this.minifiedUrl }],
            ['project_path', { value: projectPath }],
            ['type', { value: 'js_sourcemap' }],
        ]);
        if (this.gitData !== undefined) {
            if (this.gitData.gitRepositoryPayload !== undefined) {
                content.set('repository', {
                    options: {
                        contentType: 'application/json',
                        filename: 'repository',
                    },
                    value: this.gitData.gitRepositoryPayload,
                });
            }
            content.set('git_repository_url', { value: this.gitData.gitRepositoryURL });
            content.set('git_commit_sha', { value: this.gitData.gitCommitSha });
        }
        return {
            content,
        };
    }
}
exports.Sourcemap = Sourcemap;
//# sourceMappingURL=interfaces.js.map