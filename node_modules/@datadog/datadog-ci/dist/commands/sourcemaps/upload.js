"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const tiny_async_pool_1 = __importDefault(require("tiny-async-pool"));
const url_1 = require("url");
const apikey_1 = require("../../helpers/apikey");
const errors_1 = require("../../helpers/errors");
const metrics_1 = require("../../helpers/metrics");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const git_1 = require("./git");
const interfaces_1 = require("./interfaces");
const renderer_1 = require("./renderer");
const utils_2 = require("./utils");
const validation_1 = require("./validation");
const utils_3 = require("../../helpers/utils");
class UploadCommand extends clipanion_1.Command {
    constructor() {
        super();
        this.config = {
            apiKey: process.env.DATADOG_API_KEY,
            datadogSite: process.env.DATADOG_SITE || 'datadoghq.com',
        };
        this.dryRun = false;
        this.maxConcurrency = 20;
        this.projectPath = '';
        // Fills the 'repository' field of each payload with data gathered using git.
        this.addRepositoryDataToPayloads = (payloads) => __awaiter(this, void 0, void 0, function* () {
            const repositoryData = yield git_1.getRepositoryData(yield git_1.newSimpleGit(), this.context.stdout, this.repositoryURL);
            if (repositoryData === undefined) {
                return;
            }
            yield Promise.all(payloads.map((payload) => __awaiter(this, void 0, void 0, function* () {
                const repositoryPayload = this.getRepositoryPayload(repositoryData, payload.sourcemapPath);
                payload.addRepositoryData({
                    gitCommitSha: repositoryData.hash,
                    gitRepositoryPayload: repositoryPayload,
                    gitRepositoryURL: repositoryData.remote,
                });
            })));
        });
        // Looks for the sourcemaps and minified files on disk and returns
        // the associated payloads.
        this.getMatchingSourcemapFiles = () => __awaiter(this, void 0, void 0, function* () {
            const sourcemapFiles = glob_1.default.sync(utils_3.buildPath(this.basePath, '**/*js.map'));
            return Promise.all(sourcemapFiles.map((sourcemapPath) => __awaiter(this, void 0, void 0, function* () {
                const minifiedFilePath = utils_2.getMinifiedFilePath(sourcemapPath);
                const minifiedURL = this.getMinifiedURL(minifiedFilePath);
                return new interfaces_1.Sourcemap(minifiedFilePath, minifiedURL, sourcemapPath);
            })));
        });
        this.getPayloadsToUpload = (useGit) => __awaiter(this, void 0, void 0, function* () {
            const payloads = yield this.getMatchingSourcemapFiles();
            if (!useGit) {
                return payloads;
            }
            yield this.addRepositoryDataToPayloads(payloads);
            return payloads;
        });
        // GetRepositoryPayload generates the repository payload for a specific sourcemap.
        // It specifically looks for the list of tracked files that are associated to the source paths
        // declared inside the sourcemap.
        this.getRepositoryPayload = (repositoryData, sourcemapPath) => {
            let repositoryPayload;
            try {
                const files = repositoryData.trackedFilesMatcher.matchSourcemap(this.context.stdout, sourcemapPath);
                if (files) {
                    repositoryPayload = JSON.stringify({
                        data: [
                            {
                                files,
                                hash: repositoryData.hash,
                                repository_url: repositoryData.remote,
                            },
                        ],
                        // Make sure to update the version if the format of the JSON payloads changes in any way.
                        version: 1,
                    });
                }
                return repositoryPayload;
            }
            catch (error) {
                this.context.stdout.write(renderer_1.renderGitDataNotAttachedWarning(sourcemapPath, error.message));
                return undefined;
            }
        };
        this.cliVersion = require('../../../package.json').version;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.releaseVersion) {
                this.context.stderr.write('Missing release version\n');
                return 1;
            }
            if (!this.service) {
                this.context.stderr.write('Missing service\n');
                return 1;
            }
            if (!this.minifiedPathPrefix) {
                this.context.stderr.write('Missing minified path\n');
                return 1;
            }
            if (!this.isMinifiedPathPrefixValid()) {
                this.context.stdout.write(renderer_1.renderInvalidPrefix);
                return 1;
            }
            // Normalizing the basePath to resolve .. and .
            // Always using the posix version to avoid \ on Windows.
            this.basePath = path_1.default.posix.normalize(this.basePath);
            this.context.stdout.write(renderer_1.renderCommandInfo(this.basePath, this.minifiedPathPrefix, this.projectPath, this.releaseVersion, this.service, this.maxConcurrency, this.dryRun));
            const metricsLogger = metrics_1.getMetricsLogger({
                datadogSite: process.env.DATADOG_SITE,
                defaultTags: [`version:${this.releaseVersion}`, `service:${this.service}`, `cli_version:${this.cliVersion}`],
                prefix: 'datadog.ci.sourcemaps.',
            });
            const apiKeyValidator = apikey_1.newApiKeyValidator({
                apiKey: this.config.apiKey,
                datadogSite: this.config.datadogSite,
                metricsLogger: metricsLogger.logger,
            });
            const useGit = this.disableGit === undefined || !this.disableGit;
            const initialTime = Date.now();
            const payloads = yield this.getPayloadsToUpload(useGit);
            const requestBuilder = this.getRequestBuilder();
            const uploadMultipart = this.upload(requestBuilder, metricsLogger, apiKeyValidator);
            try {
                const results = yield tiny_async_pool_1.default(this.maxConcurrency, payloads, uploadMultipart);
                const totalTime = (Date.now() - initialTime) / 1000;
                this.context.stdout.write(renderer_1.renderSuccessfulCommand(results, totalTime, this.dryRun));
                metricsLogger.logger.gauge('duration', totalTime);
                return 0;
            }
            catch (error) {
                if (error instanceof errors_1.InvalidConfigurationError) {
                    this.context.stdout.write(renderer_1.renderConfigurationError(error));
                    return 1;
                }
                // Otherwise unknown error, let's propagate the exception
                throw error;
            }
            finally {
                try {
                    yield metricsLogger.flush();
                }
                catch (err) {
                    this.context.stdout.write(`WARN: ${err}\n`);
                }
            }
        });
    }
    getMinifiedURL(minifiedFilePath) {
        const relativePath = minifiedFilePath.replace(this.basePath, '');
        return utils_3.buildPath(this.minifiedPathPrefix, relativePath);
    }
    getRequestBuilder() {
        if (!this.config.apiKey) {
            throw new errors_1.InvalidConfigurationError(`Missing ${chalk_1.default.bold('DATADOG_API_KEY')} in your environment.`);
        }
        return utils_1.getRequestBuilder({
            apiKey: this.config.apiKey,
            baseUrl: utils_2.getBaseIntakeUrl(),
            headers: new Map([
                ['DD-EVP-ORIGIN', 'datadog-ci sourcemaps'],
                ['DD-EVP-ORIGIN-VERSION', this.cliVersion],
            ]),
            overrideUrl: 'api/v2/srcmap',
        });
    }
    isMinifiedPathPrefixValid() {
        let protocol;
        try {
            const objUrl = new url_1.URL(this.minifiedPathPrefix);
            protocol = objUrl.protocol;
        }
        catch (_a) {
            // Do nothing.
        }
        if (!protocol && !this.minifiedPathPrefix.startsWith('/')) {
            return false;
        }
        return true;
    }
    upload(requestBuilder, metricsLogger, apiKeyValidator) {
        return (sourcemap) => __awaiter(this, void 0, void 0, function* () {
            try {
                validation_1.validatePayload(sourcemap);
            }
            catch (error) {
                if (error instanceof validation_1.InvalidPayload) {
                    this.context.stdout.write(renderer_1.renderFailedUpload(sourcemap, error.message));
                    metricsLogger.logger.increment('skipped_sourcemap', 1, [`reason:${error.reason}`]);
                }
                else {
                    this.context.stdout.write(renderer_1.renderFailedUpload(sourcemap, `Skipping sourcemap ${sourcemap.sourcemapPath} because of error: ${error.message}`));
                    metricsLogger.logger.increment('skipped_sourcemap', 1, ['reason:unknown']);
                }
                return upload_1.UploadStatus.Skipped;
            }
            const payload = sourcemap.asMultipartPayload(this.cliVersion, this.service, this.releaseVersion, this.projectPath);
            if (this.dryRun) {
                this.context.stdout.write(`[DRYRUN] ${renderer_1.renderUpload(sourcemap)}`);
                return upload_1.UploadStatus.Success;
            }
            return upload_1.upload(requestBuilder)(payload, {
                apiKeyValidator,
                onError: (e) => {
                    this.context.stdout.write(renderer_1.renderFailedUpload(sourcemap, e.message));
                    metricsLogger.logger.increment('failed', 1);
                },
                onRetry: (e, attempts) => {
                    this.context.stdout.write(renderer_1.renderRetriedUpload(sourcemap, e.message, attempts));
                    metricsLogger.logger.increment('retries', 1);
                },
                onUpload: () => {
                    this.context.stdout.write(renderer_1.renderUpload(sourcemap));
                },
                retries: 5,
            });
        });
    }
}
exports.UploadCommand = UploadCommand;
UploadCommand.usage = clipanion_1.Command.Usage({
    description: 'Upload javascript sourcemaps to Datadog.',
    details: `
            This command will upload all javascript sourcemaps and their corresponding javascript file to Datadog in order to un-minify front-end stack traces received by Datadog.
            See README for details.
        `,
    examples: [
        [
            'Upload all sourcemaps in current directory',
            'datadog-ci sourcemaps upload . --service my-service --minified-path-prefix https://static.datadog.com --release-version 1.234',
        ],
        [
            'Upload all sourcemaps in /home/users/ci with 50 concurrent uploads',
            'datadog-ci sourcemaps upload . --service my-service --minified-path-prefix https://static.datadog.com --release-version 1.234 --concurency 50',
        ],
    ],
});
UploadCommand.addPath('sourcemaps', 'upload');
UploadCommand.addOption('basePath', clipanion_1.Command.String({ required: true }));
UploadCommand.addOption('releaseVersion', clipanion_1.Command.String('--release-version'));
UploadCommand.addOption('service', clipanion_1.Command.String('--service'));
UploadCommand.addOption('minifiedPathPrefix', clipanion_1.Command.String('--minified-path-prefix'));
UploadCommand.addOption('projectPath', clipanion_1.Command.String('--project-path'));
UploadCommand.addOption('maxConcurrency', clipanion_1.Command.String('--max-concurrency'));
UploadCommand.addOption('dryRun', clipanion_1.Command.Boolean('--dry-run'));
UploadCommand.addOption('repositoryURL', clipanion_1.Command.String('--repository-url'));
UploadCommand.addOption('disableGit', clipanion_1.Command.Boolean('--disable-git'));
//# sourceMappingURL=upload.js.map