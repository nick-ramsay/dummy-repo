"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePayload = exports.InvalidPayload = void 0;
const fs_1 = __importDefault(require("fs"));
class InvalidPayload extends Error {
    constructor(reason, message) {
        super(message);
        this.reason = reason;
    }
}
exports.InvalidPayload = InvalidPayload;
const checkFile = (path) => {
    try {
        const stats = fs_1.default.statSync(path);
        if (stats.size === 0) {
            return { exists: true, empty: true };
        }
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            return { exists: false, empty: false };
        }
        // Other kind of error
        throw error;
    }
    return { exists: true, empty: false };
};
const validatePayload = (sourcemap) => {
    // Check existence of sourcemap file
    const sourcemapCheck = checkFile(sourcemap.sourcemapPath);
    if (!sourcemapCheck.exists) {
        // This case should not happen as all collected sourcemaps should point to correct files
        throw new InvalidPayload('missing_sourcemap', `Skipping missing sourcemap (${sourcemap.sourcemapPath})`);
    }
    if (sourcemapCheck.empty) {
        throw new InvalidPayload('empty_sourcemap', `Skipping empty sourcemap (${sourcemap.sourcemapPath})`);
    }
    // Check existence of minified file
    const minifiedFileCheck = checkFile(sourcemap.minifiedFilePath);
    if (!minifiedFileCheck.exists) {
        throw new InvalidPayload('missing_js', `Missing corresponding JS file for sourcemap (${sourcemap.minifiedFilePath})`);
    }
    if (minifiedFileCheck.empty) {
        throw new InvalidPayload('empty_js', `Skipping sourcemap (${sourcemap.sourcemapPath}) due to ${sourcemap.minifiedFilePath} being empty`);
    }
};
exports.validatePayload = validatePayload;
//# sourceMappingURL=validation.js.map