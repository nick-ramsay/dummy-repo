"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("../crypto");
describe('crypto', () => {
    test('should generate ECDSA public/private keys with OpenSSH format', () => {
        const { privateKey, publicKey } = crypto_1.generateOpenSSHKeys();
        const expectedPrivateKeyFormat = /-----BEGIN OPENSSH PRIVATE KEY-----(.|\n)*-----END OPENSSH PRIVATE KEY-----/;
        expect(privateKey).toMatch(expectedPrivateKeyFormat);
        const expectedPublicKeyFormat = /ecdsa-sha2-nistp256 .*/;
        expect(publicKey).toMatch(expectedPublicKeyFormat);
    });
    test('should parse SSH keys', () => {
        const { publicKey, privateKey } = crypto_1.generateOpenSSHKeys();
        const parsedPublicKey = crypto_1.parseSSHKey(publicKey);
        const parsedPrivateKey = crypto_1.parseSSHKey(privateKey);
        expect(parsedPublicKey.type).toBe('ecdsa-sha2-nistp256');
        expect(parsedPrivateKey.type).toBe('ecdsa-sha2-nistp256');
        expect(() => crypto_1.parseSSHKey('not a valid key')).toThrow('Unsupported key format');
    });
});
//# sourceMappingURL=crypto.test.js.map