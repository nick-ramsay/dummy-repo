"use strict";
// tslint:disable: no-string-literal
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ciUtils = __importStar(require("../../../helpers/utils"));
const command_1 = require("../command");
const interfaces_1 = require("../interfaces");
const runTests = __importStar(require("../run-test"));
const fixtures_1 = require("./fixtures");
describe('Proxy configuration', () => {
    let initialHttpProxyEnv;
    beforeAll(() => {
        initialHttpProxyEnv = process.env.HTTP_PROXY;
    });
    afterAll(() => {
        if (initialHttpProxyEnv !== undefined) {
            process.env.HTTP_PROXY = initialHttpProxyEnv;
        }
        else {
            delete process.env.HTTP_PROXY;
        }
    });
    beforeEach(() => {
        delete process.env.HTTP_PROXY;
    });
    test('use proxy defined in configuration', () => __awaiter(void 0, void 0, void 0, function* () {
        const { config: proxyOpts, close: proxyClose, calls: proxyCalls } = fixtures_1.getSyntheticsProxy();
        try {
            jest.spyOn(ciUtils, 'getConfig').mockImplementation(() => __awaiter(void 0, void 0, void 0, function* () {
                return ({
                    apiKey: '123',
                    appKey: '123',
                    proxy: proxyOpts,
                    publicIds: ['123-456-789'],
                    tunnel: true,
                });
            }));
            const command = new command_1.RunTestCommand();
            command.context = { stdout: { write: jest.fn() } };
            jest.spyOn(runTests, 'getDatadogHost').mockImplementation(() => 'http://datadoghq.com/');
            yield command.execute();
            expect(proxyCalls.get).toHaveBeenCalled();
            expect(proxyCalls.presignedUrl).toHaveBeenCalled();
            expect(proxyCalls.tunnel).toHaveBeenCalled();
            expect(proxyCalls.trigger).toHaveBeenCalledWith(expect.objectContaining({
                tests: [
                    {
                        executionRule: interfaces_1.ExecutionRule.BLOCKING,
                        public_id: '123-456-789',
                        tunnel: expect.objectContaining({ host: 'host', id: 'tunnel-id', privateKey: expect.any(String) }),
                    },
                ],
            }));
        }
        finally {
            yield proxyClose();
        }
    }));
    test('use proxy defined in environment variable', () => __awaiter(void 0, void 0, void 0, function* () {
        const { config: proxyOpts, close: proxyClose, calls: proxyCalls } = fixtures_1.getSyntheticsProxy();
        process.env.HTTP_PROXY = `http://127.0.0.1:${proxyOpts.port}`;
        try {
            jest.spyOn(ciUtils, 'getConfig').mockImplementation(() => __awaiter(void 0, void 0, void 0, function* () {
                return ({
                    apiKey: '123',
                    appKey: '123',
                    publicIds: ['123-456-789'],
                    tunnel: true,
                });
            }));
            const command = new command_1.RunTestCommand();
            command.context = { stdout: { write: jest.fn() } };
            jest.spyOn(runTests, 'getDatadogHost').mockImplementation(() => 'http://datadoghq.com/');
            yield command.execute();
            expect(proxyCalls.get).toHaveBeenCalled();
            expect(proxyCalls.presignedUrl).toHaveBeenCalled();
            expect(proxyCalls.tunnel).toHaveBeenCalled();
            expect(proxyCalls.trigger).toHaveBeenCalledWith(expect.objectContaining({
                tests: [
                    {
                        executionRule: interfaces_1.ExecutionRule.BLOCKING,
                        public_id: '123-456-789',
                        tunnel: expect.objectContaining({ host: 'host', id: 'tunnel-id', privateKey: expect.any(String) }),
                    },
                ],
            }));
        }
        finally {
            yield proxyClose();
        }
    }));
});
//# sourceMappingURL=websocket.test.js.map