"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.is5xxError = exports.isNotFoundError = exports.isForbiddenError = exports.formatBackendErrors = exports.EndpointError = void 0;
const querystring_1 = require("querystring");
const utils_1 = require("../../helpers/utils");
const utils_2 = require("./utils");
class EndpointError extends Error {
    constructor(message, status) {
        super(message);
        this.message = message;
        this.status = status;
        Object.setPrototypeOf(this, EndpointError.prototype);
    }
}
exports.EndpointError = EndpointError;
const formatBackendErrors = (requestError) => {
    if (requestError.response && requestError.response.data.errors) {
        const serverHead = `query on ${requestError.config.baseURL}${requestError.config.url} returned:`;
        const errors = requestError.response.data.errors;
        if (errors.length > 1) {
            const formattedErrors = errors.map((message) => `  - ${message}`);
            return `${serverHead}\n${formattedErrors.join('\n')}`;
        }
        else if (errors.length) {
            return `${serverHead} "${errors[0]}"`;
        }
        else {
            return `error querying ${requestError.config.baseURL}${requestError.config.url}`;
        }
    }
    return requestError.message;
};
exports.formatBackendErrors = formatBackendErrors;
const triggerTests = (request) => (data) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield retryRequest({
        data,
        headers: { 'X-Trigger-App': utils_2.ciTriggerApp },
        method: 'POST',
        url: '/synthetics/tests/trigger/ci',
    }, request);
    return resp.data;
});
const getTest = (request) => (testId) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield retryRequest({
        url: `/synthetics/tests/${testId}`,
    }, request);
    return resp.data;
});
const searchTests = (request) => (query) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield retryRequest({
        params: {
            text: query,
        },
        url: '/synthetics/tests/search',
    }, request);
    return resp.data;
});
const pollResults = (request) => (resultIds) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield retryRequest({
        params: {
            result_ids: JSON.stringify(resultIds),
        },
        url: '/synthetics/tests/poll_results',
    }, request);
    return resp.data;
});
const getPresignedURL = (request) => (testIds) => __awaiter(void 0, void 0, void 0, function* () {
    const resp = yield retryRequest({
        params: {
            test_id: testIds,
        },
        paramsSerializer: (params) => querystring_1.stringify(params),
        url: '/synthetics/ci/tunnel',
    }, request);
    return resp.data;
});
const retryOn5xxErrors = (retries, error) => {
    if (retries < 3 && exports.is5xxError(error)) {
        return 500;
    }
};
const getErrorHttpStatus = (error) => { var _a; return 'status' in error ? error.status : (_a = error.response) === null || _a === void 0 ? void 0 : _a.status; };
const isForbiddenError = (error) => getErrorHttpStatus(error) === 403;
exports.isForbiddenError = isForbiddenError;
const isNotFoundError = (error) => getErrorHttpStatus(error) === 404;
exports.isNotFoundError = isNotFoundError;
const is5xxError = (error) => {
    const statusCode = getErrorHttpStatus(error);
    return statusCode && statusCode >= 500 && statusCode <= 599;
};
exports.is5xxError = is5xxError;
const retryRequest = (args, request) => utils_2.retry(() => request(args), retryOn5xxErrors);
const apiConstructor = (configuration) => {
    const { baseUrl, baseIntakeUrl, apiKey, appKey, proxyOpts } = configuration;
    const baseOptions = { apiKey, appKey, proxyOpts };
    const request = utils_1.getRequestBuilder(Object.assign(Object.assign({}, baseOptions), { baseUrl }));
    const requestIntake = utils_1.getRequestBuilder(Object.assign(Object.assign({}, baseOptions), { baseUrl: baseIntakeUrl }));
    return {
        getPresignedURL: getPresignedURL(requestIntake),
        getTest: getTest(request),
        pollResults: pollResults(request),
        searchTests: searchTests(request),
        triggerTests: triggerTests(requestIntake),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map