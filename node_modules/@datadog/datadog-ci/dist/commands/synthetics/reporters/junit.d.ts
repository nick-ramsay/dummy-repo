import { BaseContext } from 'clipanion';
import { InternalTest, LocationsMapping, PollResult, Reporter, Vitals } from '../interfaces';
interface Stats {
    allowfailures: number;
    errors: number;
    failures: number;
    skipped: number;
    tests: number;
    warnings: number;
}
interface XMLRunProperties extends Stats {
    name: string;
}
interface XMLRun {
    $: XMLRunProperties;
    testcase: XMLTestCase[];
}
interface XMLTestCaseProperties extends Stats {
    name: string;
    time: number | undefined;
    timestamp: string;
}
export interface XMLTestCase {
    $: XMLTestCaseProperties;
    allowed_error: XMLError[];
    browser_error: XMLError[];
    error: XMLError[];
    properties: {
        property: {
            $: {
                name: string;
                value: any;
            };
        }[];
    };
    testcase: XMLStep[];
    warning: XMLError[];
}
interface XMLStepProperties extends Stats {
    allow_failure: boolean;
    is_skipped: boolean;
    name: string;
    substep_public_id?: string;
    time: number;
    type: string;
    url?: string;
}
interface XMLStep {
    $: XMLStepProperties;
    browser_error?: {
        $: {
            name: string;
            type: string;
        };
        _: string;
    }[];
    error: {
        $: {
            type: 'assertion';
        };
        _: string;
    }[];
    vitals?: {
        $: Vitals;
    }[];
    warning?: {
        $: {
            type: string;
        };
        _: string;
    }[];
}
export interface XMLJSON {
    testsuites: {
        $: {
            name: string;
        };
        testsuite: XMLRun[];
    };
}
interface XMLError {
    $: {
        type: string;
        [key: string]: string;
    };
    _: string;
}
interface Args {
    context: BaseContext;
    jUnitReport?: string;
    runName?: string;
}
export declare const getDefaultStats: () => Stats;
export declare class JUnitReporter implements Reporter {
    private builder;
    private destination;
    private json;
    private write;
    constructor({ context, jUnitReport, runName }: Args);
    runEnd(): Promise<void>;
    testEnd(test: InternalTest, results: PollResult[], baseUrl: string, locations: LocationsMapping, failOnCriticalErrors: boolean, failOnTimeout: boolean): void;
    private getApiStepStats;
    private getApiTestStep;
    private getBrowserStepStats;
    private getBrowserTestStep;
    private getResultStats;
    private getSuiteStats;
    private getTestCase;
}
export {};
