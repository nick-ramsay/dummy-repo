import { APIHelper, MainReporter, PollResult, Suite, Summary, SyntheticsCIConfig, Test, Trigger } from './interfaces';
export declare const executeTests: (reporter: MainReporter, config: SyntheticsCIConfig, suites?: Suite[] | undefined) => Promise<{
    results: {
        [key: string]: PollResult[];
    };
    summary: Summary;
    tests: Test[];
    triggers: Trigger;
}>;
export declare const getTestsList: (api: APIHelper, config: SyntheticsCIConfig, reporter: MainReporter, suites?: Suite[]) => Promise<{
    config: {
        allowInsecureCertificates?: boolean | undefined;
        basicAuth?: import("./interfaces").BasicAuthCredentials | undefined;
        body?: string | undefined;
        bodyType?: string | undefined;
        cookies?: string | {
            append?: boolean | undefined;
            value: string;
        } | undefined;
        defaultStepTimeout?: number | undefined;
        deviceIds?: string[] | undefined;
        executionRule?: import("./interfaces").ExecutionRule | undefined;
        followRedirects?: boolean | undefined;
        headers?: {
            [key: string]: string;
        } | undefined;
        locations: string[];
        pollingTimeout?: number | undefined;
        retry?: import("./interfaces").RetryConfig | undefined;
        startUrl?: string | undefined;
        startUrlSubstitutionRegex?: string | undefined;
        tunnel?: import("./tunnel").TunnelInfo | undefined;
        variables?: {
            [key: string]: string;
        } | undefined;
    } | {
        allowInsecureCertificates?: boolean | undefined;
        basicAuth?: import("./interfaces").BasicAuthCredentials | undefined;
        body?: string | undefined;
        bodyType?: string | undefined;
        cookies?: string | {
            append?: boolean | undefined;
            value: string;
        } | undefined;
        defaultStepTimeout?: number | undefined;
        deviceIds?: string[] | undefined;
        executionRule?: import("./interfaces").ExecutionRule | undefined;
        followRedirects?: boolean | undefined;
        headers?: {
            [key: string]: string;
        } | undefined;
        locations?: string[] | undefined;
        pollingTimeout?: number | undefined;
        retry?: import("./interfaces").RetryConfig | undefined;
        startUrl?: string | undefined;
        startUrlSubstitutionRegex?: string | undefined;
        tunnel?: import("./tunnel").TunnelInfo | undefined;
        variables?: {
            [key: string]: string;
        } | undefined;
    };
    id: string;
    suite: string | undefined;
}[]>;
export declare const getApiHelper: (config: SyntheticsCIConfig) => APIHelper;
export declare const getDatadogHost: (useIntake: boolean | undefined, config: SyntheticsCIConfig) => string;
