import { APIHelper, ConfigOverride, ExecutionRule, InternalTest, MainReporter, PollResult, Reporter, Result, Suite, Summary, SyntheticsCIConfig, Test, TestPayload, Trigger, TriggerConfig, TriggerResponse, TriggerResult } from './interfaces';
import { Tunnel } from './tunnel';
export declare let ciTriggerApp: string;
export declare const handleConfig: (test: InternalTest, publicId: string, reporter: MainReporter, config?: ConfigOverride | undefined) => TestPayload;
export declare const setCiTriggerApp: (source: string) => void;
export declare const getExecutionRule: (test: InternalTest, configOverride?: ConfigOverride | undefined) => ExecutionRule;
export declare const getStrictestExecutionRule: (configRule: ExecutionRule, testRule?: ExecutionRule | undefined) => ExecutionRule;
export declare const isCriticalError: (result: Result) => boolean;
export declare const hasResultPassed: (result: Result, failOnCriticalErrors: boolean, failOnTimeout: boolean) => boolean;
export declare const enum ResultOutcome {
    Passed = "passed",
    PassedNonBlocking = "passed-non-blocking",
    Failed = "failed",
    FailedNonBlocking = "failed-non-blocking"
}
export declare const getResultOutcome: (test: Test, pollResult: PollResult, failOnCriticalErrors: boolean, failOnTimeout: boolean) => ResultOutcome;
export declare const getSuites: (GLOB: string, reporter: MainReporter) => Promise<Suite[]>;
export declare const wait: (duration: number) => Promise<unknown>;
export declare const waitForResults: (api: APIHelper, triggerResponses: TriggerResponse[], triggerConfigs: TriggerConfig[], options: {
    defaultTimeout: number;
    failOnCriticalErrors?: boolean;
}, reporter: MainReporter, tunnel?: Tunnel | undefined) => Promise<{
    [key: string]: PollResult[];
}>;
export declare const createTriggerResultMap: (triggerResponses: TriggerResponse[], defaultTimeout: number, triggerConfigs: TriggerConfig[]) => Map<string, TriggerResult>;
export declare const createSummary: () => Summary;
export declare const getResultDuration: (result: Result) => number;
export declare const getReporter: (reporters: Reporter[]) => MainReporter;
export declare const getTestsToTrigger: (api: APIHelper, triggerConfigs: TriggerConfig[], reporter: MainReporter) => Promise<{
    tests: InternalTest[];
    overriddenTestsToTrigger: TestPayload[];
    summary: Summary;
}>;
export declare const runTests: (api: APIHelper, testsToTrigger: TestPayload[]) => Promise<Trigger>;
export declare const fetchTest: (publicId: string, config: SyntheticsCIConfig) => Promise<Test>;
export declare const retry: <T, E extends Error>(func: () => Promise<T>, shouldRetryAfterWait: (retries: number, error: E) => number | undefined) => Promise<T>;
export declare const parseVariablesFromCli: (variableArguments: string[] | undefined, logFunction: (log: string) => void) => {
    [key: string]: string;
} | undefined;
