"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVariablesFromCli = exports.retry = exports.fetchTest = exports.runTests = exports.getTestsToTrigger = exports.getReporter = exports.getResultDuration = exports.createSummary = exports.createTriggerResultMap = exports.waitForResults = exports.wait = exports.getSuites = exports.getResultOutcome = exports.hasResultPassed = exports.isCriticalError = exports.getStrictestExecutionRule = exports.getExecutionRule = exports.setCiTriggerApp = exports.handleConfig = exports.ciTriggerApp = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const url_1 = require("url");
const util_1 = require("util");
const chalk_1 = __importDefault(require("chalk"));
const glob_1 = __importDefault(require("glob"));
const ci_1 = require("../../helpers/ci");
const tags_1 = require("../../helpers/tags");
const utils_1 = require("../../helpers/utils");
const api_1 = require("./api");
const errors_1 = require("./errors");
const interfaces_1 = require("./interfaces");
const run_test_1 = require("./run-test");
const POLLING_INTERVAL = 5000; // In ms
const PUBLIC_ID_REGEX = /^[\d\w]{3}-[\d\w]{3}-[\d\w]{3}$/;
const SUBDOMAIN_REGEX = /(.*?)\.(?=[^\/]*\..{2,5})/;
const TEMPLATE_REGEX = /{{\s*([^{}]*?)\s*}}/g;
const template = (st, context) => st.replace(TEMPLATE_REGEX, (match, p1) => (p1 in context ? context[p1] : match));
exports.ciTriggerApp = process.env.DATADOG_SYNTHETICS_CI_TRIGGER_APP || 'npm_package';
const handleConfig = (test, publicId, reporter, config) => {
    const executionRule = exports.getExecutionRule(test, config);
    let handledConfig = {
        executionRule,
        public_id: publicId,
    };
    if (!config || !Object.keys(config).length) {
        return handledConfig;
    }
    handledConfig = Object.assign(Object.assign({}, handledConfig), utils_1.pick(config, [
        'allowInsecureCertificates',
        'basicAuth',
        'body',
        'bodyType',
        'cookies',
        'defaultStepTimeout',
        'deviceIds',
        'followRedirects',
        'headers',
        'locations',
        'pollingTimeout',
        'retry',
        'startUrlSubstitutionRegex',
        'tunnel',
        'variables',
    ]));
    if ((test.type === 'browser' || test.subtype === 'http') && config.startUrl) {
        const context = parseUrlVariables(test.config.request.url, reporter);
        if (URL_VARIABLES.some((v) => { var _a; return (_a = config.startUrl) === null || _a === void 0 ? void 0 : _a.includes(v); })) {
            reporter.error('[DEPRECATION] The usage of URL variables is deprecated, see explanation in the README\n\n');
        }
        handledConfig.startUrl = template(config.startUrl, context);
    }
    return handledConfig;
};
exports.handleConfig = handleConfig;
const setCiTriggerApp = (source) => {
    exports.ciTriggerApp = source;
};
exports.setCiTriggerApp = setCiTriggerApp;
const parseUrlVariables = (url, reporter) => {
    const context = Object.assign(Object.assign({}, process.env), { URL: url });
    let objUrl;
    try {
        objUrl = new url_1.URL(url);
    }
    catch (_a) {
        reporter.error(`The start url ${url} contains variables, CI overrides will be ignored\n`);
        return context;
    }
    warnOnReservedEnvVarNames(context, reporter);
    const subdomainMatch = objUrl.hostname.match(SUBDOMAIN_REGEX);
    const domain = subdomainMatch ? objUrl.hostname.replace(`${subdomainMatch[1]}.`, '') : objUrl.hostname;
    context.DOMAIN = domain;
    context.HASH = objUrl.hash;
    context.HOST = objUrl.host;
    context.HOSTNAME = objUrl.hostname;
    context.ORIGIN = objUrl.origin;
    context.PARAMS = objUrl.search;
    context.PATHNAME = objUrl.pathname;
    context.PORT = objUrl.port;
    context.PROTOCOL = objUrl.protocol;
    context.SUBDOMAIN = subdomainMatch ? subdomainMatch[1] : undefined;
    return context;
};
const URL_VARIABLES = [
    'DOMAIN',
    'HASH',
    'HOST',
    'HOSTNAME',
    'ORIGIN',
    'PARAMS',
    'PATHNAME',
    'PORT',
    'PROTOCOL',
    'SUBDOMAIN',
];
const warnOnReservedEnvVarNames = (context, reporter) => {
    const reservedVarNames = new Set(URL_VARIABLES);
    const usedEnvVarNames = Object.keys(context).filter((name) => reservedVarNames.has(name));
    if (usedEnvVarNames.length > 0) {
        const names = usedEnvVarNames.join(', ');
        const plural = usedEnvVarNames.length > 1;
        reporter.log(`Detected ${names} environment variable${plural ? 's' : ''}. ${names} ${plural ? 'are' : 'is a'} Datadog ` +
            `reserved variable${plural ? 's' : ''} used to parse your original test URL, read more about it on ` +
            'our documentation https://docs.datadoghq.com/synthetics/ci/?tab=apitest#start-url. ' +
            'If you want to override your startUrl parameter using environment variables, ' +
            `use ${plural ? '' : 'a '}different namespace${plural ? 's' : ''}.\n\n`);
    }
};
const getExecutionRule = (test, configOverride) => {
    var _a, _b, _c, _d;
    if (configOverride && configOverride.executionRule) {
        return exports.getStrictestExecutionRule(configOverride.executionRule, (_b = (_a = test.options) === null || _a === void 0 ? void 0 : _a.ci) === null || _b === void 0 ? void 0 : _b.executionRule);
    }
    return ((_d = (_c = test.options) === null || _c === void 0 ? void 0 : _c.ci) === null || _d === void 0 ? void 0 : _d.executionRule) || interfaces_1.ExecutionRule.BLOCKING;
};
exports.getExecutionRule = getExecutionRule;
const getStrictestExecutionRule = (configRule, testRule) => {
    if (configRule === interfaces_1.ExecutionRule.SKIPPED || testRule === interfaces_1.ExecutionRule.SKIPPED) {
        return interfaces_1.ExecutionRule.SKIPPED;
    }
    if (configRule === interfaces_1.ExecutionRule.NON_BLOCKING || testRule === interfaces_1.ExecutionRule.NON_BLOCKING) {
        return interfaces_1.ExecutionRule.NON_BLOCKING;
    }
    if (configRule === interfaces_1.ExecutionRule.BLOCKING || testRule === interfaces_1.ExecutionRule.BLOCKING) {
        return interfaces_1.ExecutionRule.BLOCKING;
    }
    return interfaces_1.ExecutionRule.BLOCKING;
};
exports.getStrictestExecutionRule = getStrictestExecutionRule;
const isCriticalError = (result) => result.unhealthy || result.error === interfaces_1.ERRORS.ENDPOINT;
exports.isCriticalError = isCriticalError;
const hasResultPassed = (result, failOnCriticalErrors, failOnTimeout) => {
    if (exports.isCriticalError(result) && !failOnCriticalErrors) {
        return true;
    }
    if (result.error === interfaces_1.ERRORS.TIMEOUT && !failOnTimeout) {
        return true;
    }
    if (typeof result.passed !== 'undefined') {
        return result.passed;
    }
    if (typeof result.errorCode !== 'undefined') {
        return false;
    }
    return true;
};
exports.hasResultPassed = hasResultPassed;
const getResultOutcome = (test, pollResult, failOnCriticalErrors, failOnTimeout) => {
    var _a;
    const executionRule = exports.getExecutionRule(test, (_a = pollResult.enrichment) === null || _a === void 0 ? void 0 : _a.config_override);
    const passed = exports.hasResultPassed(pollResult.result, failOnCriticalErrors, failOnTimeout);
    if (passed) {
        if (executionRule === interfaces_1.ExecutionRule.NON_BLOCKING) {
            return "passed-non-blocking" /* PassedNonBlocking */;
        }
        return "passed" /* Passed */;
    }
    if (executionRule === interfaces_1.ExecutionRule.NON_BLOCKING) {
        return "failed-non-blocking" /* FailedNonBlocking */;
    }
    return "failed" /* Failed */;
};
exports.getResultOutcome = getResultOutcome;
const getSuites = (GLOB, reporter) => __awaiter(void 0, void 0, void 0, function* () {
    reporter.log(`Finding files in ${path.join(process.cwd(), GLOB)}\n`);
    const files = yield util_1.promisify(glob_1.default)(GLOB);
    if (files.length) {
        reporter.log(`\nGot test files:\n${files.map((file) => `  - ${file}\n`).join('')}\n`);
    }
    else {
        reporter.log('\nNo test files found.\n\n');
    }
    return Promise.all(files.map((file) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const content = yield util_1.promisify(fs.readFile)(file, 'utf8');
            return { name: file, content: JSON.parse(content) };
        }
        catch (e) {
            throw new Error(`Unable to read and parse the test file ${file}`);
        }
    })));
});
exports.getSuites = getSuites;
const wait = (duration) => __awaiter(void 0, void 0, void 0, function* () { return new Promise((resolve) => setTimeout(resolve, duration)); });
exports.wait = wait;
const waitForResults = (api, triggerResponses, triggerConfigs, options, reporter, tunnel) => __awaiter(void 0, void 0, void 0, function* () {
    const triggerResultMap = exports.createTriggerResultMap(triggerResponses, options.defaultTimeout, triggerConfigs);
    const triggerResults = [...triggerResultMap.values()];
    const maxPollingTimeout = Math.max(...triggerResults.map((tr) => tr.pollingTimeout));
    const pollingStartDate = new Date().getTime();
    let isTunnelConnected = true;
    if (tunnel) {
        tunnel
            .keepAlive()
            .then(() => (isTunnelConnected = false))
            .catch(() => (isTunnelConnected = false));
    }
    while (triggerResults.filter((tr) => !tr.result).length) {
        const pollingDuration = new Date().getTime() - pollingStartDate;
        // Remove test which exceeded their pollingTimeout
        for (const triggerResult of triggerResults.filter((tr) => !tr.result)) {
            if (pollingDuration >= triggerResult.pollingTimeout) {
                triggerResult.result = createFailingResult(interfaces_1.ERRORS.TIMEOUT, triggerResult.result_id, triggerResult.device, triggerResult.location, !!tunnel);
            }
        }
        if (tunnel && !isTunnelConnected) {
            for (const triggerResult of triggerResults.filter((tr) => !tr.result)) {
                triggerResult.result = createFailingResult(interfaces_1.ERRORS.TUNNEL, triggerResult.result_id, triggerResult.device, triggerResult.location, !!tunnel);
            }
        }
        if (pollingDuration >= maxPollingTimeout) {
            break;
        }
        let polledResults;
        const triggerResultsSucceed = triggerResults.filter((tr) => !tr.result);
        try {
            polledResults = (yield api.pollResults(triggerResultsSucceed.map((tr) => tr.result_id))).results;
        }
        catch (error) {
            if (api_1.is5xxError(error) && !options.failOnCriticalErrors) {
                polledResults = [];
                for (const triggerResult of triggerResultsSucceed) {
                    triggerResult.result = createFailingResult(interfaces_1.ERRORS.ENDPOINT, triggerResult.result_id, triggerResult.device, triggerResult.location, !!tunnel);
                }
            }
            else {
                throw error;
            }
        }
        for (const polledResult of polledResults) {
            if (polledResult.result.eventType === 'finished') {
                const triggeredResult = triggerResultMap.get(polledResult.resultID);
                if (triggeredResult) {
                    triggeredResult.result = polledResult;
                }
                const triggerResponse = triggerResponses.find((res) => res.result_id === polledResult.resultID);
                if (triggerResponse) {
                    reporter.testResult(triggerResponse, polledResult);
                }
            }
        }
        if (!triggerResults.filter((tr) => !tr.result).length) {
            break;
        }
        yield exports.wait(POLLING_INTERVAL);
    }
    // Bundle results by public id
    return triggerResults.reduce((resultsByPublicId, triggerResult) => {
        const result = triggerResult.result; // The result exists, as either polled or filled with a timeout result
        resultsByPublicId[triggerResult.public_id] = [...(resultsByPublicId[triggerResult.public_id] || []), result];
        return resultsByPublicId;
    }, {});
});
exports.waitForResults = waitForResults;
const createTriggerResultMap = (triggerResponses, defaultTimeout, triggerConfigs) => {
    var _a, _b;
    const timeoutByPublicId = {};
    for (const trigger of triggerConfigs) {
        timeoutByPublicId[trigger.id] = (_a = trigger.config.pollingTimeout) !== null && _a !== void 0 ? _a : defaultTimeout;
    }
    const triggerResultMap = new Map();
    for (const triggerResponse of triggerResponses) {
        triggerResultMap.set(triggerResponse.result_id, Object.assign(Object.assign({}, triggerResponse), { pollingTimeout: (_b = timeoutByPublicId[triggerResponse.public_id]) !== null && _b !== void 0 ? _b : defaultTimeout }));
    }
    return triggerResultMap;
};
exports.createTriggerResultMap = createTriggerResultMap;
const createFailingResult = (errorMessage, resultId, deviceId, dcId, tunnel) => ({
    dc_id: dcId,
    result: {
        device: { height: 0, id: deviceId, width: 0 },
        duration: 0,
        error: errorMessage,
        eventType: 'finished',
        passed: false,
        startUrl: '',
        stepDetails: [],
        tunnel,
    },
    resultID: resultId,
    timestamp: 0,
});
const createSummary = () => ({
    criticalErrors: 0,
    failed: 0,
    failedNonBlocking: 0,
    passed: 0,
    skipped: 0,
    testsNotFound: new Set(),
    timedOut: 0,
});
exports.createSummary = createSummary;
const getResultDuration = (result) => {
    if ('duration' in result) {
        return Math.round(result.duration);
    }
    if ('timings' in result) {
        return Math.round(result.timings.total);
    }
    return 0;
};
exports.getResultDuration = getResultDuration;
const getReporter = (reporters) => ({
    error: (error) => {
        for (const reporter of reporters) {
            if (typeof reporter.error === 'function') {
                reporter.error(error);
            }
        }
    },
    initErrors: (errors) => {
        for (const reporter of reporters) {
            if (typeof reporter.initErrors === 'function') {
                reporter.initErrors(errors);
            }
        }
    },
    log: (log) => {
        for (const reporter of reporters) {
            if (typeof reporter.log === 'function') {
                reporter.log(log);
            }
        }
    },
    reportStart: (timings) => {
        for (const reporter of reporters) {
            if (typeof reporter.reportStart === 'function') {
                reporter.reportStart(timings);
            }
        }
    },
    runEnd: (summary) => {
        for (const reporter of reporters) {
            if (typeof reporter.runEnd === 'function') {
                reporter.runEnd(summary);
            }
        }
    },
    testEnd: (test, results, baseUrl, locationNames, failOnCriticalErrors, failOnTimeout) => {
        for (const reporter of reporters) {
            if (typeof reporter.testEnd === 'function') {
                reporter.testEnd(test, results, baseUrl, locationNames, failOnCriticalErrors, failOnTimeout);
            }
        }
    },
    testResult: (response, pollResult) => {
        for (const reporter of reporters) {
            if (typeof reporter.testResult === 'function') {
                reporter.testResult(response, pollResult);
            }
        }
    },
    testTrigger: (test, testId, executionRule, config) => {
        for (const reporter of reporters) {
            if (typeof reporter.testTrigger === 'function') {
                reporter.testTrigger(test, testId, executionRule, config);
            }
        }
    },
    testWait: (test) => {
        for (const reporter of reporters) {
            if (typeof reporter.testWait === 'function') {
                reporter.testWait(test);
            }
        }
    },
    testsWait: (tests) => {
        for (const reporter of reporters) {
            if (typeof reporter.testsWait === 'function') {
                reporter.testsWait(tests);
            }
        }
    },
});
exports.getReporter = getReporter;
const getTestsToTrigger = (api, triggerConfigs, reporter) => __awaiter(void 0, void 0, void 0, function* () {
    const overriddenTestsToTrigger = [];
    const errorMessages = [];
    const summary = exports.createSummary();
    const tests = yield Promise.all(triggerConfigs.map(({ config, id, suite }) => __awaiter(void 0, void 0, void 0, function* () {
        let test;
        id = PUBLIC_ID_REGEX.test(id) ? id : id.substr(id.lastIndexOf('/') + 1);
        try {
            test = Object.assign(Object.assign({}, (yield api.getTest(id))), { suite });
        }
        catch (error) {
            if (api_1.isNotFoundError(error)) {
                summary.testsNotFound.add(id);
                const errorMessage = api_1.formatBackendErrors(error);
                errorMessages.push(`[${chalk_1.default.bold.dim(id)}] ${chalk_1.default.yellow.bold('Test not found')}: ${errorMessage}`);
                return;
            }
            throw error;
        }
        const overriddenConfig = exports.handleConfig(test, id, reporter, config);
        overriddenTestsToTrigger.push(overriddenConfig);
        reporter.testTrigger(test, id, overriddenConfig.executionRule, config);
        if (overriddenConfig.executionRule === interfaces_1.ExecutionRule.SKIPPED) {
            summary.skipped++;
        }
        else {
            reporter.testWait(test);
            return test;
        }
    })));
    // Display errors at the end of all tests for better visibility.
    reporter.initErrors(errorMessages);
    if (!overriddenTestsToTrigger.length) {
        throw new errors_1.CiError('NO_TESTS_TO_RUN');
    }
    const waitedTests = tests.filter(definedTypeGuard);
    if (waitedTests.length > 0) {
        reporter.testsWait(waitedTests);
    }
    return { tests: waitedTests, overriddenTestsToTrigger, summary };
});
exports.getTestsToTrigger = getTestsToTrigger;
const runTests = (api, testsToTrigger) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = { tests: testsToTrigger };
    const tagsToLimit = {
        [tags_1.GIT_COMMIT_MESSAGE]: 500,
    };
    const ciMetadata = ci_1.getCIMetadata(tagsToLimit);
    if (ciMetadata) {
        payload.metadata = ciMetadata;
    }
    try {
        return yield api.triggerTests(payload);
    }
    catch (e) {
        const errorMessage = api_1.formatBackendErrors(e);
        const testIds = testsToTrigger.map((t) => t.public_id).join(',');
        // Rewrite error message
        throw new api_1.EndpointError(`[${testIds}] Failed to trigger tests: ${errorMessage}\n`, e.response.status);
    }
});
exports.runTests = runTests;
const fetchTest = (publicId, config) => __awaiter(void 0, void 0, void 0, function* () {
    const apiHelper = run_test_1.getApiHelper(config);
    return apiHelper.getTest(publicId);
});
exports.fetchTest = fetchTest;
const definedTypeGuard = (o) => !!o;
const retry = (func, shouldRetryAfterWait) => __awaiter(void 0, void 0, void 0, function* () {
    const trier = (retries = 0) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            return yield func();
        }
        catch (e) {
            const waiter = shouldRetryAfterWait(retries, e);
            if (waiter) {
                yield exports.wait(waiter);
                return trier(retries + 1);
            }
            throw e;
        }
    });
    return trier();
});
exports.retry = retry;
const parseVariablesFromCli = (variableArguments = [], logFunction) => {
    const variables = {};
    for (const variableArgument of variableArguments) {
        const separatorIndex = variableArgument.indexOf('=');
        if (separatorIndex === -1) {
            logFunction(`Ignoring variable "${variableArgument}" as separator "=" was not found`);
            continue;
        }
        if (separatorIndex === 0) {
            logFunction(`Ignoring variable "${variableArgument}" as variable name is empty`);
            continue;
        }
        const key = variableArgument.substring(0, separatorIndex);
        const value = variableArgument.substring(separatorIndex + 1);
        variables[key] = value;
    }
    return Object.keys(variables).length > 0 ? variables : undefined;
};
exports.parseVariablesFromCli = parseVariablesFromCli;
//# sourceMappingURL=utils.js.map