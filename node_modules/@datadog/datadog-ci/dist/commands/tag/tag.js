"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const ci_1 = require("../../helpers/ci");
const retry_1 = require("../../helpers/retry");
const tags_1 = require("../../helpers/tags");
const utils_1 = require("../../helpers/utils");
class TagCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.config = {
            apiKey: process.env.DATADOG_API_KEY || process.env.DD_API_KEY,
            envVarTags: process.env.DD_TAGS,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.level !== 'pipeline' && this.level !== 'job') {
                this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} Level must be one of [pipeline, job]\n`);
                return 1;
            }
            const tags = Object.assign(Object.assign({}, (this.config.envVarTags ? tags_1.parseTags(this.config.envVarTags.split(',')) : {})), (this.tags ? tags_1.parseTags(this.tags) : {}));
            if (Object.keys(tags).length === 0) {
                this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} DD_TAGS environment variable or --tags command line argument is required\n`);
                return 1;
            }
            try {
                const { provider, ciEnv } = ci_1.getCIEnv();
                // For GitHub only the pipeline level is supported as there is no way to identify the job from the runner.
                if (provider === 'github' && this.level === 'job') {
                    this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} Cannot use level "job" for GitHub Actions.`);
                    return 1;
                }
                const exitStatus = yield this.sendTags(ciEnv, this.level === 'pipeline' ? 0 : 1, provider, tags);
                if (exitStatus !== 0 && this.noFail) {
                    this.context.stderr.write(`${chalk_1.default.yellow.bold('[WARNING]')} sending tags failed but continuing due to --no-fail\n`);
                    return 0;
                }
                else if (exitStatus === 0) {
                    this.context.stdout.write('Tags sent\n');
                }
                return exitStatus;
            }
            catch (error) {
                this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} ${error.message}\n`);
                return 1;
            }
        });
    }
    sendTags(ciEnv, level, provider, tags) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.config.apiKey) {
                this.context.stdout.write(`Neither ${chalk_1.default.red.bold('DATADOG_API_KEY')} nor ${chalk_1.default.red.bold('DD_API_KEY')} is in your environment.\n`);
                throw new Error('API key is missing');
            }
            const site = process.env.DATADOG_SITE || process.env.DD_SITE || 'datadoghq.com';
            const baseAPIURL = `https://${utils_1.getApiHostForSite(site)}`;
            const request = utils_1.getRequestBuilder({ baseUrl: baseAPIURL, apiKey: this.config.apiKey });
            const doRequest = () => request({
                data: {
                    data: {
                        attributes: {
                            ci_env: ciEnv,
                            ci_level: level,
                            provider,
                            tags,
                        },
                        type: 'ci_custom_tag',
                    },
                },
                method: 'post',
                url: 'api/v2/ci/pipeline/tags',
            });
            try {
                yield retry_1.retryRequest(doRequest, {
                    onRetry: (e, attempt) => {
                        this.context.stderr.write(chalk_1.default.yellow(`[attempt ${attempt}] Could not send tags. Retrying...: ${e.message}\n`));
                    },
                    retries: 5,
                });
            }
            catch (error) {
                this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} Could not send tags: ${error.message}\n`);
                return 1;
            }
            return 0;
        });
    }
}
exports.TagCommand = TagCommand;
TagCommand.usage = clipanion_1.Command.Usage({
    description: 'Add tags to a CI Pipeline trace pipeline or job span in Datadog.',
    details: `
            This command when run from a supported CI provider sends an arbitrary set of key:value
            tags to Datadog to include in the CI Visibility traces.
    `,
    examples: [
        ['Add a team tag to the current pipeline', 'datadog-ci tag --level pipeline --tags team:backend'],
        ['Tag the current CI job with the go version', 'datadog-ci tag --level job --tags "go.version:`go version`"'],
    ],
});
TagCommand.addPath('tag');
TagCommand.addOption('noFail', clipanion_1.Command.Boolean('--no-fail'));
TagCommand.addOption('tags', clipanion_1.Command.Array('--tags'));
TagCommand.addOption('level', clipanion_1.Command.String('--level'));
//# sourceMappingURL=tag.js.map