"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const upload_1 = require("../upload");
const ciUtils = __importStar(require("../utils"));
describe('upload', () => {
    describe('upload', () => {
        const errorCallback = jest.fn();
        const retryCallback = jest.fn();
        const uploadCallback = jest.fn();
        const verifyKey = jest.fn();
        const mockAxiosResponse = (responses) => {
            let mock = jest.spyOn(axios_1.default, 'create');
            responses.forEach((response) => {
                mock = mock.mockImplementationOnce((() => response));
            });
            mock.mockImplementation((() => () => undefined));
            return mock;
        };
        beforeEach(() => {
            jest.restoreAllMocks();
        });
        test('should upload successfully a multipart payload', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockCreate = mockAxiosResponse([() => Promise.resolve({})]);
            const request = ciUtils.getRequestBuilder({ apiKey: '', baseUrl: '' });
            const result = yield upload_1.upload(request)({ content: new Map() }, {
                onError: errorCallback,
                onRetry: retryCallback,
                onUpload: uploadCallback,
                retries: 5,
            });
            expect(mockCreate).toBeCalledTimes(1);
            expect(uploadCallback).toBeCalledTimes(1);
            expect(errorCallback).toBeCalledTimes(0);
            expect(retryCallback).toBeCalledTimes(0);
            expect(result).toStrictEqual(upload_1.UploadStatus.Success);
        }));
        test('should retry retriable failed requests', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockCreate = mockAxiosResponse([
                () => Promise.reject({
                    response: {
                        status: 500,
                    },
                }),
                () => Promise.resolve({}),
            ]);
            const request = ciUtils.getRequestBuilder({ apiKey: '', baseUrl: '' });
            const result = yield upload_1.upload(request)({ content: new Map() }, {
                onError: errorCallback,
                onRetry: retryCallback,
                onUpload: uploadCallback,
                retries: 5,
            });
            expect(mockCreate).toBeCalledTimes(2);
            expect(uploadCallback).toBeCalledTimes(1);
            expect(errorCallback).toBeCalledTimes(0);
            expect(retryCallback).toBeCalledTimes(1);
            expect(result).toStrictEqual(upload_1.UploadStatus.Success);
        }));
        test('should not retry some clients failures', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockCreate = mockAxiosResponse([
                () => Promise.reject({
                    response: {
                        status: 413,
                    },
                }),
            ]);
            const request = ciUtils.getRequestBuilder({ apiKey: '', baseUrl: '' });
            const result = yield upload_1.upload(request)({ content: new Map() }, {
                onError: errorCallback,
                onRetry: retryCallback,
                onUpload: uploadCallback,
                retries: 5,
            });
            expect(mockCreate).toBeCalledTimes(1);
            expect(uploadCallback).toBeCalledTimes(1);
            expect(errorCallback).toBeCalledTimes(1);
            expect(retryCallback).toBeCalledTimes(0);
            expect(result).toStrictEqual(upload_1.UploadStatus.Failure);
        }));
        test('should retry only a given amount of times', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockCreate = mockAxiosResponse([
                () => Promise.reject({
                    response: {
                        status: 413,
                    },
                }),
                () => Promise.reject({
                    response: {
                        status: 413,
                    },
                }),
            ]);
            const request = ciUtils.getRequestBuilder({ apiKey: '', baseUrl: '' });
            const result = yield upload_1.upload(request)({ content: new Map() }, {
                onError: errorCallback,
                onRetry: retryCallback,
                onUpload: uploadCallback,
                retries: 1,
            });
            expect(mockCreate).toBeCalledTimes(1);
            expect(uploadCallback).toBeCalledTimes(1);
            expect(errorCallback).toBeCalledTimes(1);
            expect(retryCallback).toBeCalledTimes(0);
            expect(result).toStrictEqual(upload_1.UploadStatus.Failure);
        }));
        test('apiKeyValidator should not be called in case of success', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockCreate = mockAxiosResponse([() => Promise.resolve({})]);
            const request = ciUtils.getRequestBuilder({ apiKey: '', baseUrl: '' });
            verifyKey.mockImplementation(() => Promise.resolve());
            const result = yield upload_1.upload(request)({ content: new Map() }, {
                apiKeyValidator: {
                    verifyApiKey: verifyKey,
                },
                onError: errorCallback,
                onRetry: retryCallback,
                onUpload: uploadCallback,
                retries: 1,
            });
            expect(mockCreate).toBeCalledTimes(1);
            expect(verifyKey).toBeCalledTimes(0);
            expect(uploadCallback).toBeCalledTimes(1);
            expect(errorCallback).toBeCalledTimes(0);
            expect(retryCallback).toBeCalledTimes(0);
            expect(result).toStrictEqual(upload_1.UploadStatus.Success);
        }));
        test('apiKeyValidator should be called in case of ambiguous response', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockCreate = mockAxiosResponse([
                () => Promise.reject({
                    response: {
                        status: 400,
                    },
                }),
            ]);
            const request = ciUtils.getRequestBuilder({ apiKey: '', baseUrl: '' });
            verifyKey.mockImplementation(() => Promise.reject('errorApiKey'));
            const result = upload_1.upload(request)({ content: new Map() }, {
                apiKeyValidator: {
                    verifyApiKey: verifyKey,
                },
                onError: errorCallback,
                onRetry: retryCallback,
                onUpload: uploadCallback,
                retries: 1,
            });
            expect(result).rejects.toMatch('errorApiKey');
            expect(mockCreate).toBeCalledTimes(1);
            expect(uploadCallback).toBeCalledTimes(1);
            expect(errorCallback).toBeCalledTimes(0);
            expect(retryCallback).toBeCalledTimes(0);
        }));
    });
});
//# sourceMappingURL=upload.test.js.map