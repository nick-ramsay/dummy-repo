"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitMetadata = void 0;
const simple_git_1 = __importDefault(require("simple-git"));
const tags_1 = require("./tags");
const getGitMetadata = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const git = simple_git_1.default({
            baseDir: process.cwd(),
            binary: 'git',
            // We are invoking at most 5 git commands at the same time.
            maxConcurrentProcesses: 5,
        });
        const [commitSHA, branch, repositoryUrl, message, authorAndCommitter] = yield Promise.all([
            git.revparse('HEAD'),
            git.branch(),
            git.listRemote(['--get-url']),
            git.show(['-s', '--format=%s']),
            git.show(['-s', '--format=%an,%ae,%aI,%cn,%ce,%cI']),
        ]);
        const [authorName, authorEmail, authorDate, committerName, committerEmail, committerDate,] = authorAndCommitter.split(',');
        return {
            [tags_1.GIT_REPOSITORY_URL]: repositoryUrl.trim(),
            [tags_1.GIT_BRANCH]: branch.current,
            [tags_1.GIT_SHA]: commitSHA,
            [tags_1.GIT_COMMIT_MESSAGE]: message.trim(),
            [tags_1.GIT_COMMIT_COMMITTER_DATE]: committerDate.trim(),
            [tags_1.GIT_COMMIT_COMMITTER_EMAIL]: committerEmail.trim(),
            [tags_1.GIT_COMMIT_COMMITTER_NAME]: committerName.trim(),
            [tags_1.GIT_COMMIT_AUTHOR_DATE]: authorDate.trim(),
            [tags_1.GIT_COMMIT_AUTHOR_EMAIL]: authorEmail.trim(),
            [tags_1.GIT_COMMIT_AUTHOR_NAME]: authorName.trim(),
        };
    }
    catch (e) {
        return {};
    }
});
exports.getGitMetadata = getGitMetadata;
//# sourceMappingURL=git.js.map