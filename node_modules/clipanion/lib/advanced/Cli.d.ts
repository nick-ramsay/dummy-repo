/// <reference types="node" />
import { Readable, Writable } from 'stream';
import { CommandClass, Command } from './Command';
export declare type BaseContext = {
    stdin: Readable;
    stdout: Writable;
    stderr: Writable;
};
export declare type CliContext<Context extends BaseContext> = {
    commandClass: CommandClass<Context>;
};
export declare type MiniCli<Context extends BaseContext> = {
    definitions(): Object;
    error(error: Error, opts?: {
        command?: Command<Context> | null;
    }): string;
    process(input: string[]): Command<Context>;
    run(input: string[], context?: Partial<Context>): Promise<number>;
    usage(command?: CommandClass<Context> | Command<Context> | null, opts?: {
        detailed?: boolean;
        prefix?: string;
    }): string;
};
export declare class Cli<Context extends BaseContext = BaseContext> implements MiniCli<Context> {
    private readonly builder;
    private readonly registrations;
    readonly binaryLabel?: string;
    readonly binaryName: string;
    readonly binaryVersion?: string;
    static from<Context extends BaseContext = BaseContext>(commandClasses: CommandClass<Context>[]): Cli<Context>;
    constructor({ binaryLabel, binaryName, binaryVersion }?: {
        binaryLabel?: string;
        binaryName?: string;
        binaryVersion?: string;
    });
    register(commandClass: CommandClass<Context>): void;
    process(input: string[]): Command<Context>;
    run(input: Command<Context> | string[], context: Context): Promise<number>;
    runExit(input: Command<Context> | string[], context: Context): Promise<void>;
    suggest(input: string[], partial: boolean): string[][];
    definitions(): {
        path: string;
        usage: string;
        category: string | undefined;
        description: string | undefined;
        details: string | undefined;
        examples: string[][] | undefined;
    }[];
    usage(command?: CommandClass<Context> | Command<Context> | null, { detailed, prefix }?: {
        detailed?: boolean;
        prefix?: string;
    }): string;
    error(error: Error, { command }?: {
        command?: Command<Context> | null;
    }): string;
    private getUsageByRegistration;
    private getUsageByIndex;
}
