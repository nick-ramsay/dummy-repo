"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const core_1 = require("../core");
const core_2 = require("../core");
const format_1 = require("../format");
const HelpCommand_1 = require("./HelpCommand");
class Cli {
    constructor({ binaryLabel, binaryName = `...`, binaryVersion } = {}) {
        this.registrations = new Map();
        this.builder = new core_2.CliBuilder({ binaryName });
        this.binaryLabel = binaryLabel;
        this.binaryName = binaryName;
        this.binaryVersion = binaryVersion;
    }
    static from(commandClasses) {
        const cli = new Cli();
        for (const commandClass of commandClasses)
            cli.register(commandClass);
        return cli;
    }
    register(commandClass) {
        const commandBuilder = this.builder.command();
        this.registrations.set(commandClass, commandBuilder.cliIndex);
        const { definitions } = commandClass.resolveMeta(commandClass.prototype);
        for (const definition of definitions)
            definition(commandBuilder);
        commandBuilder.setContext({
            commandClass,
        });
    }
    process(input) {
        const { contexts, process } = this.builder.compile();
        const state = process(input);
        switch (state.selectedIndex) {
            case core_1.HELP_COMMAND_INDEX:
                {
                    return HelpCommand_1.HelpCommand.from(state, this, contexts);
                }
                break;
            default:
                {
                    const { commandClass } = contexts[state.selectedIndex];
                    const command = new commandClass();
                    command.path = state.path;
                    const { transformers } = commandClass.resolveMeta(commandClass.prototype);
                    for (const transformer of transformers)
                        transformer(state, command);
                    return command;
                }
                break;
        }
    }
    async run(input, context) {
        let command;
        if (!Array.isArray(input)) {
            command = input;
        }
        else {
            try {
                command = this.process(input);
            }
            catch (error) {
                context.stdout.write(this.error(error));
                return 1;
            }
        }
        if (command.help) {
            context.stdout.write(this.usage(command, { detailed: true }));
            return 0;
        }
        command.context = context;
        command.cli = {
            definitions: () => this.definitions(),
            error: (error, opts) => this.error(error, opts),
            process: input => this.process(input),
            run: (input, subContext) => this.run(input, Object.assign(Object.assign({}, context), subContext)),
            usage: (command, opts) => this.usage(command, opts),
        };
        let exitCode;
        try {
            exitCode = await command.validateAndExecute();
        }
        catch (error) {
            context.stdout.write(this.error(error, { command }));
            return 1;
        }
        return exitCode;
    }
    async runExit(input, context) {
        process.exitCode = await this.run(input, context);
    }
    suggest(input, partial) {
        const { contexts, process, suggest } = this.builder.compile();
        return suggest(input, partial);
    }
    definitions() {
        const data = [];
        for (const [commandClass, number] of this.registrations) {
            if (typeof commandClass.usage === `undefined`)
                continue;
            const path = this.getUsageByIndex(number, { detailed: false });
            const usage = this.getUsageByIndex(number, { detailed: true });
            const category = typeof commandClass.usage.category !== `undefined`
                ? format_1.formatMarkdownish(commandClass.usage.category, false)
                : undefined;
            const description = typeof commandClass.usage.description !== `undefined`
                ? format_1.formatMarkdownish(commandClass.usage.description, false)
                : undefined;
            const details = typeof commandClass.usage.details !== `undefined`
                ? format_1.formatMarkdownish(commandClass.usage.details, true)
                : undefined;
            const examples = typeof commandClass.usage.examples !== `undefined`
                ? commandClass.usage.examples.map(([label, cli]) => [format_1.formatMarkdownish(label, false), cli.replace(/\$0/g, this.binaryName)])
                : undefined;
            data.push({ path, usage, category, description, details, examples });
        }
        return data;
    }
    usage(command = null, { detailed = false, prefix = `$ ` } = {}) {
        // @ts-ignore
        const commandClass = command !== null && typeof command.getMeta === `undefined`
            ? command.constructor
            : command;
        let result = ``;
        if (!commandClass) {
            const commandsByCategories = new Map();
            for (const [commandClass, number] of this.registrations.entries()) {
                if (typeof commandClass.usage === `undefined`)
                    continue;
                const category = typeof commandClass.usage.category !== `undefined`
                    ? format_1.formatMarkdownish(commandClass.usage.category, false)
                    : null;
                let categoryCommands = commandsByCategories.get(category);
                if (typeof categoryCommands === `undefined`)
                    commandsByCategories.set(category, categoryCommands = []);
                const usage = this.getUsageByIndex(number);
                categoryCommands.push({ commandClass, usage });
            }
            const categoryNames = Array.from(commandsByCategories.keys()).sort((a, b) => {
                if (a === null)
                    return -1;
                if (b === null)
                    return +1;
                return a.localeCompare(b, `en`, { usage: `sort`, caseFirst: `upper` });
            });
            const hasLabel = typeof this.binaryLabel !== `undefined`;
            const hasVersion = typeof this.binaryVersion !== `undefined`;
            if (hasLabel || hasVersion) {
                if (hasLabel && hasVersion)
                    result += `${chalk_1.default.bold(`${this.binaryLabel} - ${this.binaryVersion}`)}\n\n`;
                else if (hasLabel)
                    result += `${chalk_1.default.bold(`${this.binaryLabel}`)}\n`;
                else
                    result += `${chalk_1.default.bold(`${this.binaryVersion}`)}\n`;
                result += `  ${chalk_1.default.bold(prefix)}${this.binaryName} <command>\n`;
            }
            else {
                result += `${chalk_1.default.bold(prefix)}${this.binaryName} <command>\n`;
            }
            for (let categoryName of categoryNames) {
                const commands = commandsByCategories.get(categoryName).slice().sort((a, b) => {
                    return a.usage.localeCompare(b.usage, `en`, { usage: `sort`, caseFirst: `upper` });
                });
                const header = categoryName !== null
                    ? categoryName.trim()
                    : `Where <command> is one of`;
                result += `\n`;
                result += `${chalk_1.default.bold(`${header}:`)}\n`;
                for (let { commandClass, usage } of commands) {
                    const doc = commandClass.usage.description || `undocumented`;
                    result += `\n`;
                    result += `  ${chalk_1.default.bold(usage)}\n`;
                    result += `    ${format_1.formatMarkdownish(doc, false)}`;
                }
            }
            result += `\n`;
            result += format_1.formatMarkdownish(`You can also print more details about any of these commands by calling them after adding the \`-h,--help\` flag right after the command name.`, true);
        }
        else {
            if (!detailed) {
                result += `${chalk_1.default.bold(prefix)}${this.getUsageByRegistration(commandClass)}\n`;
            }
            else {
                const { description = ``, details = ``, examples = [], } = commandClass.usage || {};
                if (description !== ``) {
                    result += format_1.formatMarkdownish(description, false).replace(/^./, $0 => $0.toUpperCase());
                    result += `\n`;
                }
                if (details !== `` || examples.length > 0) {
                    result += `${chalk_1.default.bold(`Usage:`)}\n`;
                    result += `\n`;
                }
                result += `${chalk_1.default.bold(prefix)}${this.getUsageByRegistration(commandClass)}\n`;
                if (details !== ``) {
                    result += `\n`;
                    result += `${chalk_1.default.bold(`Details:`)}\n`;
                    result += `\n`;
                    result += format_1.formatMarkdownish(details, true);
                }
                if (examples.length > 0) {
                    result += `\n`;
                    result += `${chalk_1.default.bold(`Examples:`)}\n`;
                    for (let [description, example] of examples) {
                        result += `\n`;
                        result += format_1.formatMarkdownish(description, false);
                        result += example
                            .replace(/^/m, `  ${chalk_1.default.bold(prefix)}`)
                            .replace(/\$0/g, this.binaryName)
                            + `\n`;
                    }
                }
            }
        }
        return result;
    }
    error(error, { command = null } = {}) {
        let result = ``;
        let name = error.name.replace(/([a-z])([A-Z])/g, `$1 $2`);
        if (name === `Error`)
            name = `Internal Error`;
        result += `${chalk_1.default.red.bold(name)}: ${error.message}\n`;
        // @ts-ignore
        const meta = error.clipanion;
        if (typeof meta !== `undefined`) {
            if (meta.type === `usage`) {
                result += `\n`;
                result += this.usage(command);
            }
        }
        else {
            if (error.stack) {
                result += `${error.stack.replace(/^.*\n/, ``)}\n`;
            }
        }
        return result;
    }
    getUsageByRegistration(klass, opts) {
        const index = this.registrations.get(klass);
        if (typeof index === `undefined`)
            throw new Error(`Assertion failed: Unregistered command`);
        return this.getUsageByIndex(index, opts);
    }
    getUsageByIndex(n, opts) {
        return this.builder.getBuilderByIndex(n).usage(opts);
    }
}
exports.Cli = Cli;
